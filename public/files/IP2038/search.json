[{"path":"index.html","id":"introduction-to-the-module","chapter":"1 Introduction to the Module","heading":"1 Introduction to the Module","text":"","code":""},{"path":"index.html","id":"key-people","chapter":"1 Introduction to the Module","heading":"1.1 Key People","text":"Module Convenor: Dr. Stefano Pagliari\nOffice Hour: Wednesday 10:30-12:30.\nPlease book using IP Dept Booking  link\nModule Convenor: Dr. Stefano PagliariOffice Hour: Wednesday 10:30-12:30.Please book using IP Dept Booking  linkTutorial Leader: Dr. Pedro MachadoTutorial Leader: Dr. Pedro MachadoCourse Office:\nEmail: IntPol.PG@city.ac.uk, \nRoom: A129\nCourse Office:Email: IntPol.PG@city.ac.uk, Room: A129","code":""},{"path":"index.html","id":"timetable","chapter":"1 Introduction to the Module","heading":"1.2 Timetable","text":"Lecture (online): Monday 09:00-09:50. Join Ms Teams (link)Tutorial 1 (person):  Friday 10:00 10:50 EG01Tutorial 2 (person): Friday 11:00 11:50 EG01Tutorial 3 (person): Friday 12:00 12:50 EG01","code":""},{"path":"index.html","id":"focus-of-the-module","chapter":"1 Introduction to the Module","heading":"1.3 Focus of the Module","text":"module learn answer substantive questions related study political economy analyzing real-world political economic data. particular, learn tofind evaluate datasetswrangle data usable formatexplore describe data visualizations","code":""},{"path":"index.html","id":"introduction-to-r","chapter":"1 Introduction to the Module","heading":"1.4 Introduction to R","text":"module, learn download, manipulate, examine visualize data “R”. R programming language designed statistical computing widely used academia data science community.Unlike softwares like Excel SPSS, R works entering instructions (code) prompt. type instruction hit return, R interprets sends resulting output back console.\ninstance, boxes show typing instructions R works. part box starts #> [1] displays results returned R. Instead simply reading code examples, encouraged type code snippets RStudio Cloud project replicate results.basic, R works simple calculator able perform mathematical operations line code. instance, see happens instruct R calculate square root 9 using sqrt() function.similar way, possible write code instruct R download data, manipulate , plot . instance, code snippet creates plot showing relationship GDP per capita life expectancy across large range countries since 1960s.can copy content code RStudio selecting “copy clipboard” icon typing manually. instance, happens replace “Japan” France?reason using R module include”R s free open-source (unlike Stata, SPSS, SASS)powerful able handle large datasets (MS Excel)shorter learning curve computing languages (like Python).large expanding user community building “packages” containing tools can use import analyze data","code":"\nsqrt(9)\n#> [1] 3\nlibrary(gapminder)\nlibrary(tidyverse)\n\nggplot(data = gapminder, \n       mapping = aes(x = gdpPercap, \n                     y = lifeExp,\n                     color = continent)) + \n  geom_point() + \n  coord_cartesian() + \n  scale_x_log10()  + \n  labs(x = \"log GDP\", \n       y = \"Life Expectancy\", \n       title = \"A Gapminder Plot\")"},{"path":"index.html","id":"how-will-we-learn-data-analysis-with-r","chapter":"1 Introduction to the Module","heading":"1.5 How will we learn Data Analysis with R","text":"assigned textbook R module. Instead, lectures, notes, weekly sessions computer lab introduce main steps required get started data analysis R complete assignment module.\nspecifically:weekly lectures provide introduction different steps involved exploratory data analysisThe course notes document explain steps can completed using R provide code examples can copy adapt project. encouraged replicate code snippets found course notes using RStudio, experiment happens change code.weekly computer labs allow put practice learnt help tutorial leader","code":""},{"path":"index.html","id":"additional-resources","chapter":"1 Introduction to the Module","heading":"1.6 Additional Resources","text":"two freely available e-books provide excellent accessible reference respectively data analysis data visualization using R.Wickham, Hadley, Garrett Grolemund (2017). “R Data Science”. O’Reilly. linkHealey, Kieran (2018), “Data Visualization. Practical Introduction”, Princeton University Press link","code":""},{"path":"index.html","id":"searching-for-help-online","chapter":"1 Introduction to the Module","heading":"1.7 Searching for Help Online","text":"key skill learning programme learn search internet. something novel programmers well experienced data analysts routinely. important learn “look help” internet.Two common approaches :Search trying achieve search engine, specifying language (R) specific package (e.g. tidyverse, ggplot) using. instance, search Google “filter dataframe R” “change label colour ggplot”)Often first results returned search engine pages Stackoverflow. website users post questions receive advise. useful answer usually voted found top. can search website previously posted questions similar ask new questions.","code":""},{"path":"rstudio-and-rstudio-cloud.html","id":"rstudio-and-rstudio-cloud","chapter":"2 RStudio and RStudio Cloud","heading":"2 RStudio and RStudio Cloud","text":"RStudio integrated development environment (IDE) used programme R. words, RStudio software helps write R code, examine data, produce graphs, present findings.","code":""},{"path":"rstudio-and-rstudio-cloud.html","id":"optional-installing-rstudio-on-your-personal-computer","chapter":"2 RStudio and RStudio Cloud","heading":"2.1 (Optional) Installing RStudio on your personal computer","text":"R RStudio free download use personal computer. order install RStudio computer need :Download install R (programming language) https://cran.r-project.org/. R maintained international team developers make language available web page Comprehensive R Archive Network. top web page provides three links downloading R. Follow link describes operating system: Windows, Mac, Linux.Download install RStudio Desktop computer https://rstudio.com/products/rstudio/download/. ’ve installed RStudio, can open like program computer—usually clicking icon desktop.Please note required module use browser-based version RStudio (RStudio Cloud)","code":""},{"path":"rstudio-and-rstudio-cloud.html","id":"rstudio-cloud","chapter":"2 RStudio and RStudio Cloud","heading":"2.2 RStudio Cloud","text":"RStudio Cloud (https://rstudio.cloud/) lightweight, cloud-based version RStudio runs browser. City paid module subscription, make easier access RStudio complete module.\ncan switch free individual RStudio Cloud plan module completed.","code":""},{"path":"rstudio-and-rstudio-cloud.html","id":"getting-started-in-rstudio-cloud","chapter":"2 RStudio and RStudio Cloud","heading":"2.2.1 Getting Started in RStudio Cloud","text":"received email RStudio Cloud looks like :email contains link direct towards webpage can create account. order :email contains link direct towards webpage can create account. order :must use City email addressYou must use City email addressChoose strong passwordYou must use first last names registered CityAfter completed registration, can access RStudio Cloud browser navigating : https://rstudio.cloud/ using browser. need sign using city email new RStudio Cloud password.","code":""},{"path":"rstudio-and-rstudio-cloud.html","id":"rstudio-cloud-interface","chapter":"2 RStudio and RStudio Cloud","heading":"2.2.2 RStudio Cloud Interface","text":"open RStudio Cloud, see different elements:Workspace: can create projects well copy versions weekly worksheetsTutorials: folder contains code used tutorials module. can run code included projects edit . order edit , need create copy projects. Save weekly project new file clicking “Save Permanent Copy”.","code":""},{"path":"rstudio-and-rstudio-cloud.html","id":"rstudio-working-environment","chapter":"2 RStudio and RStudio Cloud","heading":"2.3 RStudio Working Environment","text":"open project RStudio/RStudio Cloud, access main working environment.four main panels.Console: can execute commands see results. Commands run temporary close R, lose command history thus ability replicate done.Code Editor: work different code files can saved. Just “save” files (like MS Word documents), don’t lose work, R can save R Scripts, don’t lose various R commands executed. script series commands can save, modify, re-run whenever like. RStudio, create, edit, save scripts code editor panelEnvironment/History: space shows objects create work withFiles/Help/Packages: space can see files, plots graphs produce, R packages install, help packages.","code":""},{"path":"rstudio-and-rstudio-cloud.html","id":"how-to-create-a-r-script","chapter":"2 RStudio and RStudio Cloud","heading":"2.3.1 How to create a R Script","text":"order create new R Script:Go Code Editor panel click “New File” buttonSelect “R Script”\ncreated script, can type multiple instructions within different lines code, run, save script.","code":""},{"path":"rstudio-and-rstudio-cloud.html","id":"how-to-run-a-r-script","chapter":"2 RStudio and RStudio Cloud","heading":"2.3.2 How to Run a R Script","text":"different ways run script. can:Type command ConsoleYou can run script line clicking line typing Command+Enter (Mac OS) Control+Enter (Windows) run line, hitting Run dropdown menu.run whole script, type Ctrl+Shift+Enter Windows, Command+Shift+Enter.can also process script clicking “Run” icon top script editor. line selected, run line. Otherwise, entire script compiled.","code":""},{"path":"rstudio-and-rstudio-cloud.html","id":"how-to-save-a-r-script","chapter":"2 RStudio and RStudio Cloud","heading":"2.3.3 How to Save a R Script","text":"order save R script can:type Control + S (panels) Command + S (Mac OS)Click “save” buttonBy default script saved folder project.","code":""},{"path":"rstudio-and-rstudio-cloud.html","id":"commenting-your-code","chapter":"2 RStudio and RStudio Cloud","heading":"2.3.4 Commenting your code","text":"R code can hard read. someone else tries read (later ), might hard figure done. Adding comments make code easier read.R can insert comment script placing # beginning code.See example:also possible place comment (#) end line code.","code":"\n#This script creates data and returns TRUE if the mean is less than the median.\n\n# Create the number vector (sequence of numbers) called x\nx <- c(1, 3, 4)\n# Compute the mean of vector x and store value it in object y\ny <- mean(x)\n# Compute the median of vector x and store value it in object z\nz <- median(x)\n# Compare the mean and median of vector x with a logical expression\ny < z\n#> [1] TRUE\n#This script creates data and returns TRUE if the mean is less than the median.\n\nx <- c(1, 3, 4) # Create the number vector (sequence of numbers) called x\ny <- mean(x) # Compute the mean of vector x and store value it in object y\nz <- median(x) # Compute the median of vector x and store value it in object z\ny < z # Compare the mean and median of vector x with a logical expression\n#> [1] TRUE"},{"path":"rstudio-and-rstudio-cloud.html","id":"importingexporting-files-from-rstudio-cloud","chapter":"2 RStudio and RStudio Cloud","heading":"2.3.5 Importing/Exporting files from RStudio Cloud","text":"Files tab can manage files stored project folder. particular, find commands :upload file computer project folderdelete file project folderrename file project folderdownload file project folder computer (–> export )","code":""},{"path":"getting-started-with-r.html","id":"getting-started-with-r","chapter":"3 Getting Started with R","heading":"3 Getting Started with R","text":"","code":""},{"path":"getting-started-with-r.html","id":"objects-in-r","chapter":"3 Getting Started with R","heading":"3.1 Objects in R","text":"","code":""},{"path":"getting-started-with-r.html","id":"creating-objects-with-the-assignment-operator--","chapter":"3 Getting Started with R","heading":"3.1.1 Creating Objects with the Assignment Operator <-","text":"R object-oriented language, , data code can saved objects.Instead sending result command console, can use <- operator assign results object create. combination lesser sign dash.see results stored object, can simply type name object console hit return. recall name assigned office, R output value assigned object.helpful think assignment operator <- verb “gets” “equal ”, reading left right. code can read “object British_Prime_Ministers gets result concatenating following names (”Baldwin”, ”Chamberlain”, ”Churchill”, etc…) vector using function c()”Shortcuts: possible call assignment operator <- using keyboard shortcut Option+minus MacOS Alt+minus Windows.create objects assigning things names <- operator, appear R’s workspace environment. workspace specific current project.","code":"\n\nBritish_Prime_Ministers <- c(\"Baldwin\", \"Chamberlain\", \"Churchill\", \"Attlee\", \"Churchill\", \"Eden\", \"MacMillan\", \"Douglas-Home\", \"Heath\", \"Wilson\", \"Callaghan\", \"Tatcher\", \"Major\", \"Blair\", \"Brown\", \"Cameron\", \"May\", \"Johnson\")\n\nBritish_Prime_Ministers\n#>  [1] \"Baldwin\"      \"Chamberlain\"  \"Churchill\"   \n#>  [4] \"Attlee\"       \"Churchill\"    \"Eden\"        \n#>  [7] \"MacMillan\"    \"Douglas-Home\" \"Heath\"       \n#> [10] \"Wilson\"       \"Callaghan\"    \"Tatcher\"     \n#> [13] \"Major\"        \"Blair\"        \"Brown\"       \n#> [16] \"Cameron\"      \"May\"          \"Johnson\""},{"path":"getting-started-with-r.html","id":"naming-object","chapter":"3 Getting Started with R","heading":"3.1.2 Naming Object","text":"can give objects names, restrictions:spaces name. Instead common use _ link different wordsno mathematical operators (-, +, *, /, etc…)object names must start letter can include numbersFor instance, can correct names code return error run ?Names R case sensitive. means object my_data object My_Data.\ninstance, see happens run code :Running code result error Object \"My_Name\" found since initially stored name object my_name","code":"\nMy Name <- \"Stefano\"\n \nMy Name\n# Store your name in variable my_name\nmy_name <- \"Stefano\"\n\n# Check if your name is the one assigned\nMy_Name == \"Stefano\""},{"path":"getting-started-with-r.html","id":"types-of-objects","chapter":"3 Getting Started with R","heading":"3.2 Types of Objects","text":"Objects can many things:string (character, word, longer text)numbera vector (sequence strings numbers)function;matrix (rows columns numbers)dataframe (rectangular table consisting observations variables)figure set figures.etc…can use function class() interrogate value stored. Knowing object’s class tells lot can can’t ","code":""},{"path":"getting-started-with-r.html","id":"numbers","chapter":"3 Getting Started with R","heading":"3.2.1 Numbers","text":"Objects can numbers.numerical object created, can can manipulated numbers.","code":"\n  MyObject <- 2\n  \n  2 * MyObject\n#> [1] 4\n  # Create object UK_GDP\n  UK_GDP <- 2170000000000\n\n  # Create object UK_Population\n  UK_Population <- 67886004\n\n  # Calculate gdp per capital\n  UK_GDP_Per_Capita <- UK_GDP/UK_Population\n  UK_GDP_Per_Capita\n#> [1] 31965.35"},{"path":"getting-started-with-r.html","id":"characters","chapter":"3 Getting Started with R","heading":"3.2.2 Characters","text":"Objects can characters. combination words, numbers, symbols within quotation marks stored “character” objectIf store number within quotation marks, R treat character won’t possible perform traditional mathematical operation .instance, code like calculate total population UK, running code result error. Can fix ?","code":"\n\n  #Store my name in an object called \"my_name\"\n  my_name <- \"Stefano\"\n\n  #Print the content of the object \"my_name\" in the console\n  my_name\n#> [1] \"Stefano\"\n  UK_GDP <- \"2170000000000\"\n\n  class(UK_GDP)\n#> [1] \"character\"\n  # Save the Population of UK Nations in separate objects\n  Pop_England <- \"53107169\"\n  Pop_Scotland <- \"5299900\"\n  Pop_Wales <- \"3063758\"\n  Pop_NIreland <- \"1814318\"\n\n  # Calculate Population United Kingdom\n  Pop_UK <- Pop_England + Pop_Scotland + Pop_Wales + Pop_NIreland\n#> Error in Pop_England + Pop_Scotland: non-numeric argument to binary operator\n  \n  # Print the results in the console\n  Pop_UK\n#> Error in eval(expr, envir, enclos): object 'Pop_UK' not found"},{"path":"getting-started-with-r.html","id":"logical","chapter":"3 Getting Started with R","heading":"3.2.3 Logical","text":"Objects can also logical (booleans) statements take either true false value.instance can check whether object certain value wether two objects value using equality operator (==). result logical value (true/false) can also stored object.","code":"\n\n  # Store my name into object called \"my_name\"\n  my_name <- \"Stefano\"\n\n  # check if my_name is equal to \"Mark\" and store it in an object called \"am_I_Mark\"\n  am_I_Mark <- (my_name == \"Mark\") \n\n  # print the results of am_I_Mark\n  am_I_Mark\n#> [1] FALSE\n\n  # check what type of object is \"am_I_Mark\"\n  class(am_I_Mark)\n#> [1] \"logical\"\n  two_plus_two_is_five <- (2 + 2 == 5)\n  two_plus_two_is_five\n#> [1] FALSE"},{"path":"getting-started-with-r.html","id":"vectors","chapter":"3 Getting Started with R","heading":"3.2.4 Vectors","text":"vector collection values arranged order. Vectors building blocks data sets.build vectors R using function c(), short concatenate. different elements vector placed within parentheses separated comma.function c() can also used combine different vectors objects single vector:Many R commands can applied vector. instance, function max returns highest value numerical vector, function min returns lowest value numerical vector.function sum adds different element numerical vector","code":"\n\n#Create vector composed of 7 different strings, divided by a comma\nSeven_Dwarves <- c(\"Doc\", \"Grumpy\", \"Happy\", \"Sleepy\", \"Bashful\", \"Sneezy\", \"Dopey\")\n\nSeven_Dwarves\n#> [1] \"Doc\"     \"Grumpy\"  \"Happy\"   \"Sleepy\"  \"Bashful\"\n#> [6] \"Sneezy\"  \"Dopey\"\nTory_Leader <- \"Johnson\"\n\nLabour_Leader <- \"Starmer\"\n\nLibdem_Leader <- \"Davey\"\n\nSNP_Leader <- \"Sturgeon\"\n\nUK_Party_Leader <- c(Tory_Leader, Labour_Leader, Libdem_Leader, SNP_Leader)\n\nUK_Party_Leader\n#> [1] \"Johnson\"  \"Starmer\"  \"Davey\"    \"Sturgeon\"\n#Create vector including the monthly inflation rates in the US\nUS_Inflation_2020 <- c(0.39, 0.27, 0.22, 0.67, 0.002, 0.55, 0.51, 0.32, 0.14, 0.04, 0.06, 0.09 )\n\n#identify the element of the vector with the highest value using \nmax(US_Inflation_2020)\n#> [1] 0.67\n\nmin(US_Inflation_2020)\n#> [1] 0.002\n#Create vector including the monthly inflation rates in the US\n\nVotes_Yay <- 120\nVotes_Nay <- 84\nVotes_Abstain <- 5\n\n#Create vector with all votes\nAll_Votes <- c(Votes_Yay, Votes_Nay, Votes_Abstain)\n \nsum(All_Votes)\n#> [1] 209"},{"path":"getting-started-with-r.html","id":"functions-in-r","chapter":"3 Getting Started with R","heading":"3.3 Functions in R","text":"","code":""},{"path":"getting-started-with-r.html","id":"what-are-functions-in-r","chapter":"3 Getting Started with R","heading":"3.3.1 What are Functions in R","text":"Functions commands called perform specific actions objects input assign. order function something us, need call .Functions include typical commands might execute import data, analyze data, create maps using geographic data; scrape text, pictures, links, data webpages; download documents examine text similarity, repetition, sentiment, etc…","code":""},{"path":"getting-started-with-r.html","id":"recognizing-functions","chapter":"3 Getting Started with R","heading":"3.3.2 Recognizing functions","text":"Functions denoted name followed set parentheses contain input (object) series inputs (separated commas) function executed.R many built-functions. example:round() round number certain number decimalspaste() combine two strings single stringmean() calculate average value vector numbers","code":"\nround(3.4)\n#> [1] 3\nround(3.6)\n#> [1] 4\n\nmy_name <- \"Stefano\"\n\npaste(\"Hi, my name is\" , my_name)\n#> [1] \"Hi, my name is Stefano\"\n\nUS_Inflation_Jan2020 <- 0.39\nUS_Inflation_Feb2020 <- 0.27\nUS_Inflation_Mar2020 <- 0.22\nUS_Inflation_Apr2020 <- 0.67  \nUS_Inflation_May2020 <- 0.002\nUS_Inflation_Jun2020 <- 0.55\nUS_Inflation_Jul2020 <- 0.51\nUS_Inflation_Aug2020 <- 0.32\nUS_Inflation_Sept2020 <- 0.14\nUS_Inflation_Oct2020 <- 0.04\nUS_Inflation_Nov2020 <- 0.06\nUS_Inflation_Dec2020 <- 0.09\n\nAverage_US_Inflation <- mean(US_Inflation_Jan2020,\n                       US_Inflation_Feb2020,\n                       US_Inflation_Mar2020,\n                       US_Inflation_Apr2020,\n                       US_Inflation_May2020,\n                       US_Inflation_Jun2020,\n                       US_Inflation_Jul2020,\n                       US_Inflation_Aug2020,\n                       US_Inflation_Sept2020,\n                       US_Inflation_Oct2020,\n                       US_Inflation_Nov2020,\n                       US_Inflation_Dec2020)\n\nAverage_US_Inflation                       \n#> [1] 0.39"},{"path":"getting-started-with-r.html","id":"help-with-functions","chapter":"3 Getting Started with R","heading":"3.3.3 Help with functions","text":"want learn function, type ? function name console. example ?round","code":"\n  ?round"},{"path":"getting-started-with-r.html","id":"activity-what-do-these-functions-do","chapter":"3 Getting Started with R","heading":"3.3.4 Activity: What do these functions do?","text":"Run edit different code chunks find functions . can find information typing ? followed function’s name?\nfunctions ?tolower()length()sqrt()gsub()sort()grepl()","code":"\ntolower(\"STRING\")\n#> [1] \"string\"\n\n# You can find more information about this function by typing ?tolower \nlength(c(\"Doc\", \"Grumpy\", \"Happy\", \"Sleepy\", \"Bashful\", \"Sneezy\", \"Dopey\")) \n#> [1] 7\n\n# You can find more information about this function by typing ?length \nsqrt(81)\n#> [1] 9\n\n# You can find more information about this function by typing ?sqrt \ngsub(\"Tuesday\", \"Wednesday\", \"Today is Tuesday\")\n#> [1] \"Today is Wednesday\"\n\n# You can find more information about this function by typing ?gsub\nsort(c(14, 12, 16, 9))\n#> [1]  9 12 14 16\n\n# You can find more information about this function by typing ?sort\ngrepl(\"day\", \"Wednesday\")\n#> [1] TRUE\n\ngrepl(\"day\", \"March\")\n#> [1] FALSE\n# You can find more information about this function by typing ?grepl"},{"path":"getting-started-with-r.html","id":"r-packages","chapter":"3 Getting Started with R","heading":"3.4 R Packages","text":"number common function come pre-loaded open R, others need imported working environment loading packages.Packages allow build upon work done others complete tasks analyzing data creating R.","code":""},{"path":"getting-started-with-r.html","id":"how-to-install-packages","chapter":"3 Getting Started with R","heading":"3.4.1 How to install packages","text":"order access commands included packages, need install packages R first time use , load workspace every time use .order install package call function install.packages(\"NAME PACKAGE\").\ncan install packages R hand-selecting Install, Packages Files/Help/Packages panel, typing “package_name”.","code":""},{"path":"getting-started-with-r.html","id":"loading-packages","chapter":"3 Getting Started with R","heading":"3.4.2 Loading packages","text":"order use functions contained package, need first load work environment using library() function.must load package R “library” order use , installed.RStudio Cloud, time open new R session online, need load packages wish use session.load packages, can:Type library(package_name)Select package list packages using Files/Packages/Help panel.","code":""},{"path":"getting-started-with-r.html","id":"tidyverse","chapter":"3 Getting Started with R","heading":"3.4.3 Tidyverse","text":"module bulk analysis important packages:dplyr() manipulate dataggplot2() visualize datatidyr()packages part common group packages called tidyverse. can install load packages part tidyverse usingExample, order load “tidyverse” package","code":"\ninstall.packages(\"tidyverse\")\n\nlibrary(tidyverse)"},{"path":"importing-data-into-r.html","id":"importing-data-into-r","chapter":"4 Importing Data into R","heading":"4 Importing Data into R","text":"","code":""},{"path":"importing-data-into-r.html","id":"importing-a-dataframe-from-an-existing-file","chapter":"4 Importing Data into R","heading":"4.1 Importing a Dataframe from an Existing File","text":"R includes variety packages functions designed import data working environment store object data.frame. tibble special type dataframe.Different functions available depending file formats need import.","code":""},{"path":"importing-data-into-r.html","id":"csv-files","chapter":"4 Importing Data into R","heading":"4.1.1 CSV files","text":"Comma-separated value (CSV) files common way store tabular data. just plain text files columns separated commas rows separated line breaks, like :Multiple packages available R load .csv file work environment. read_csv() function part readr package, one piece tidyverse, make sure tidyverse package loaded.\nfunction read_csv takes argument within brackets name file imported. case file located subfolder project, need indicate also path file located computer.instance, thecode loading dataset called “UK_Inequality” located subfolder project named “Data”, store object Inequality_DF. object tibble type dataframe.read_csv can also used import files stored website. , need provide main argument URL.instance, Oxford Covid-19 Government Response Tracker research project based collects data policies introduced different countries response Covid-19 pandemic. datasets stored online data repository series csv files . URL csv files can passed read_csv import content data (please note download data Github need select “raw” format)can find information read_csv() function, type ?read_csv console.","code":"person, class, role, programme\nStefano P., IP2038, instructor, IPE\nNiko S., IP2038, student, Pol\nHana M., IP2038, student, IPE\nlibrary(tidyverse)\n\n# Here's how we read that CSV data\nInequality_DF <- read_csv('data/UK_Inequality.csv')\n\n# Print the beginning of the dataset imported\nhead(Inequality_DF)\n#> # A tibble: 6 × 5\n#>   country variable    year Bottom_50_Perc Top_1_Perc\n#>   <chr>   <chr>      <dbl>          <dbl>      <dbl>\n#> 1 GB      sptinc992j  1937             NA      0.205\n#> 2 GB      sptinc992j  1949             NA      0.139\n#> 3 GB      sptinc992j  1951             NA      0.132\n#> 4 GB      sptinc992j  1952             NA      0.123\n#> 5 GB      sptinc992j  1953             NA      0.118\n#> 6 GB      sptinc992j  1954             NA      0.117\n\n# load the tidyverse library to load the read_csv function\nlibrary(tidyverse)\n\n# load the dataset at the URL below and store it in a element called \"oxfordVaccine_DF\"\noxfordVaccine_DF <- read_csv(\"https://raw.githubusercontent.com/OxCGRT/covid-policy-tracker/master/data/OxCGRT_vaccines_full.csv\")\n#> Warning: One or more parsing issues, see `problems()` for\n#> details\n\n# Print to the console the initial values of the dataset\nhead(oxfordVaccine_DF)\n#> # A tibble: 6 × 171\n#>   CountryName CountryCode     Date `V1_Vaccine Prioritisati…\n#>   <chr>       <chr>          <dbl>                     <dbl>\n#> 1 Aruba       ABW         20200101                         0\n#> 2 Aruba       ABW         20200102                         0\n#> 3 Aruba       ABW         20200103                         0\n#> 4 Aruba       ABW         20200104                         0\n#> 5 Aruba       ABW         20200105                         0\n#> 6 Aruba       ABW         20200106                         0\n#> # … with 167 more variables: V1_0-4 yrs infants <dbl>,\n#> #   V1_5-15 yrs young people <dbl>,\n#> #   V1_Airport/Border/Airline Staff <dbl>,\n#> #   V1_At Risk 16-19 yrs <dbl>, V1_At Risk 20-24 yrs <dbl>,\n#> #   V1_At Risk 25-29 yrs <dbl>, V1_At Risk 30-34 yrs <dbl>,\n#> #   V1_At Risk 35-39 yrs <dbl>, V1_At Risk 40-44 yrs <dbl>,\n#> #   V1_At Risk 45-49 yrs <dbl>, …"},{"path":"importing-data-into-r.html","id":"excel-files-.xls-.xlsx","chapter":"4 Importing Data into R","heading":"4.1.2 Excel files (.xls, .xlsx)","text":"read_csv() allows import csv files, R can read data many different formats.readxl package allows get data Excel R. package part tidyverse, needs loaded using library(readxl). loaded package, can import excel files using read_excel function","code":"\nlibrary(readxl)\n\nGlobal_Findex_Database <- read_excel(data/Global_Findex_Database.xlsx)"},{"path":"importing-data-into-r.html","id":"spss-and-stata","chapter":"4 Importing Data into R","heading":"4.1.3 SPSS and STATA","text":"Sometimes need access data saved statistical packages like STATA SPSS.\n, can use haven packages within tidyverse world. package loaded can import data file stata using read_stata() functionThe read_spss() function can used import SPSS data files extension .sav","code":"\n# Load package\nlibrary(haven)\n\n#Import data\ndesiguales_stata <- read_stata(\"Data/desiguales.dta\")\n# Load package\nlibrary(haven)\n\n#Import data\ndesiguales_spss <- read_spss(\"Data/desiguales.sav\")"},{"path":"importing-data-into-r.html","id":"importing-other-types-of-data","chapter":"4 Importing Data into R","heading":"4.1.4 Importing Other Types of Data","text":"rio package can import/export multiple types data.installed loaded rio package, function import() can used import data broad range file formats. information data format supported Rio, see online documentation package","code":"\n#install the package\ninstall.packages(\"rio\")\n\n#load the package the package\nlibrary(rio)\n\n#Import csv file using \"import\" function\ndesiguales <- import('Data/desiguales.csv')\n\n#Import excel file using \"import\" function\ndesiguales_xlsx <- import(\"Data/desiguales.xlsx\")"},{"path":"importing-data-into-r.html","id":"importing-data-via-rstudio-helper","chapter":"4 Importing Data into R","heading":"4.1.5 Importing data via RStudio helper","text":"order faciliate task importing data, RStudio data import tool.access feature, use “Import Dataset” dropdown “Environment” paneSource: RStudioAlternatively can accessed selecting “File” menu, followed “Import Dataset” submenu.Source: RStudioThis feature allow import data CSV files (select “Text”), Excel files, well SPSS, SAS, Stata files. data importer includes functionalities select columns imported change data type. point--click wait perform functions described , equivalent code can found “code preview”. Paste code script ensure reprodicibility code.Source: RStudioFor information RStudio feature, please consult documentation RStudio webpage","code":""},{"path":"importing-data-into-r.html","id":"import-data-from-a-package","chapter":"4 Importing Data into R","heading":"4.2 Import Data From a Package","text":"number cases, possible load datasets working environment using ad-hoc packages. contains one functions designed download entire datasets part datasets online source.One example type often used purpose teaching gapminder package downloads small subset data found website gapminder.org.Running code download gapminder dataset store working environment.packages instead allow select specific parts larger dataset imported working environment.instance, WDI package allows users search download data 40 datasets hosted World Bank, including World Development Indicators (‘WDI’), International Debt Statistics, Business, Human Capital Index, Sub-national Poverty indicators. case, installed loaded package, can use WDIsearch function search available datasets containing certain keyword.identified dataset interested exploring, can download working environment using WDI function. code example downloads GDP per capita Canada, Mexico, United States 1960 2020 plot ","code":"\n#Install the package. This needs to be run only the first time the package is installed\n# install.packages(\"gapminder\") \n\n#Load package\nlibrary(\"gapminder\") \n\n#Store data in an object called \"gapminder_DF\"\n\ngapminder_DF <- gapminder\n# The package needs to be installed only the first time it is run\n#install.packages('WDI')\n\n#Load the package\nlibrary(\"WDI\")\n\n#Search available datasets\nWDIsearch('gdp per capita') \n# The package needs to be installed only the first time it is run\n#install.packages('WDI')\n\n#Load the package\nlibrary(\"WDI\")\n\n#Download the data regarding GDP per capita (constant 2000 US$) for a certain period and store it in an object called dat\ndat = WDI(indicator='NY.GDP.PCAP.KD', country=c('MX','CA','US'), start=1960, end=2020)\n\n#plot the data\nlibrary(ggplot2)\nggplot(dat, aes(x = year, y = NY.GDP.PCAP.KD, color=country)) + \n    geom_line() +\n    xlab('Year') + \n    ylab('GDP per capita')"},{"path":"importing-data-into-r.html","id":"examples-of-dataset-available-from-a-package","chapter":"4 Importing Data into R","heading":"4.2.1 Examples of dataset available from a package","text":"examples packages can used directly load relevant datasets working environment :unvotes: Historical voting data United Nations General Assembly.unvotes: Historical voting data United Nations General Assembly.hansard: package pull data UK parliament http://www.data.parliament.uk/ APIhansard: package pull data UK parliament http://www.data.parliament.uk/ APIpeacesciencer: Different datasets related study conflict peacewid-r-tool: data World Wealth Income Database (WID.world)rqog: data Quality Government Institute datasetimfr: download data International Monetary Fund’s data APIvdemdata: load recent V-Dem (Varieties Democracy) V-Partydatasets.OECD: allows user download data OECD’s APIukpolice: data UK police database","code":"\n\n#install the package \"hansard\"\n#install.packages(\"hansard\")\n\n#load the package \"hansard\"\nlibrary(hansard)\n\n# Download and show data regarding how Jacob Rees-Mogg (MP 4099) voted between 25 Jan 2022 and 4 Feb 2022\nmp_vote_record(4099, start_date = \"2021-01-25\",\n                    end_date = \"2021-02-04\", verbose = FALSE)\n\n#Install packages\n#install.packages(\"remotes\")\n#remotes::install_github(\"njtierney/ukpolice\")\n\n# load package\nlibrary(ukpolice)\nlibrary(tidyverse)\n\n# Load the data regarding crime committed in a given location\ncrime_data <- ukp_crime(lat = 51.52765231, lng = -0.1024097940746401)\n\n#Calculate the number of crimes by category\ncrime_data_summary = crime_data %>%\n  group_by(category) %>%\n  summarize(number_crimes = n()) \n  \n#Plot the crimes committed in the selected location over last month\n\n  ggplot(data = crime_data_summary, \n      aes(x = reorder(category, number_crimes),\n             y = number_crimes)) + \n  geom_col() + \n  labs(x = \"Crime Type\",\n       y = \"Number of Crimes\",\n       title = paste0(\"Crimes commited in \",crime_data$date[1])) +\n  coord_flip() +\n  theme_minimal()"},{"path":"inspecting-a-dataset.html","id":"inspecting-a-dataset","chapter":"5 Inspecting a Dataset","heading":"5 Inspecting a Dataset","text":"","code":""},{"path":"inspecting-a-dataset.html","id":"peeking-at-the-data","chapter":"5 Inspecting a Dataset","heading":"5.1 Peeking at the Data","text":"loaded dataset working environment RStudio, can can start exploring data.\nDifferent functions also available peek data within R Studio.head function displays first 6 rows dataframe.possible view entire dataset within RStudio using command View followed name dataframe clicking data name dataset Environment panel (top-right).open entire dataset separate tab. viewer allows filter value specific column well reorder .","code":"\nlibrary(gapminder)\n\n#Create the gap dataset from gapminder function\ngap <- gapminder\n\n# Print in the console the initial values for each column\nhead(gap)\n#> # A tibble: 6 × 6\n#>   country     continent  year lifeExp      pop gdpPercap\n#>   <fct>       <fct>     <int>   <dbl>    <int>     <dbl>\n#> 1 Afghanistan Asia       1952    28.8  8425333      779.\n#> 2 Afghanistan Asia       1957    30.3  9240934      821.\n#> 3 Afghanistan Asia       1962    32.0 10267083      853.\n#> 4 Afghanistan Asia       1967    34.0 11537966      836.\n#> 5 Afghanistan Asia       1972    36.1 13079460      740.\n#> 6 Afghanistan Asia       1977    38.4 14880372      786.\nView(gap)"},{"path":"inspecting-a-dataset.html","id":"dimensions-of-a-dataframe","chapter":"5 Inspecting a Dataset","heading":"5.2 Dimensions of a dataframe","text":"One first elements may want know dataset number observations (rows) variables (columns). can computed using function dim(), adding name object dataset stored within parentheses. instance, let’s look dimensions Gapminder dataset.results function show dataframe 6 variables (columns) 1704 obvervations (rows),dimensions dataframe also visible RStudio ‘environment’ panel (top-right), next name object.","code":"\n\nlibrary(gapminder)\n\n#Create the gap dataset from gapminder function\ngap_df <- gapminder\n\n#List the number of rows and variables using the\ndim(gap_df)\n#> [1] 1704    6"},{"path":"inspecting-a-dataset.html","id":"exploring-the-variables","chapter":"5 Inspecting a Dataset","heading":"5.3 Exploring the variables","text":"","code":""},{"path":"inspecting-a-dataset.html","id":"name-of-the-variables","chapter":"5 Inspecting a Dataset","heading":"5.3.1 Name of the Variables","text":"can extract name columns (variables) using function colnames()","code":"\n\nlibrary(gapminder)\n\n#Create the gap dataset from gapminder function\ngap_df <- gapminder\n\n# Print in the console the name of the variables\ncolnames(gap_df)\n#> [1] \"country\"   \"continent\" \"year\"      \"lifeExp\"  \n#> [5] \"pop\"       \"gdpPercap\""},{"path":"inspecting-a-dataset.html","id":"type-of-variables","chapter":"5 Inspecting a Dataset","heading":"5.3.2 Type of Variables","text":"Knowing type variables present dataset crucial able analyze . Many summaries, models, functions, pictures can generate R depend knowing kind variable ’re using. wrong kind variable used command function often elicit error message.function str can used investigate type (class) variables given dataframe.case, can see 6 columns gap dataset take different types:variable gdpPercap (GDP Per Capita) lifeExp (life expectancy) assigned class “numeric” since numeric continuous variables.variable year pop numerical discrete variables assigned element class integer, different numeric class accomodates values fraction.variable country continent categorical variables imported case class factor Factors used represent categorical data can ordered unordered. cases unordered categorical variables can stored characters.similar breakdown variables types combined peak initial values can obtained using glimpse() function (part tidyverse).","code":"\nlibrary(gapminder)\n\n#Create the gap dataset from gapminder function\ngap <- gapminder\n\n#Check type of variable lifeExp\nstr(gap)\n#> tibble [1,704 × 6] (S3: tbl_df/tbl/data.frame)\n#>  $ country  : Factor w/ 142 levels \"Afghanistan\",..: 1 1 1 1 1 1 1 1 1 1 ...\n#>  $ continent: Factor w/ 5 levels \"Africa\",\"Americas\",..: 3 3 3 3 3 3 3 3 3 3 ...\n#>  $ year     : int [1:1704] 1952 1957 1962 1967 1972 1977 1982 1987 1992 1997 ...\n#>  $ lifeExp  : num [1:1704] 28.8 30.3 32 34 36.1 ...\n#>  $ pop      : int [1:1704] 8425333 9240934 10267083 11537966 13079460 14880372 12881816 13867957 16317921 22227415 ...\n#>  $ gdpPercap: num [1:1704] 779 821 853 836 740 ..."},{"path":"inspecting-a-dataset.html","id":"summary-of-the-variables","chapter":"5 Inspecting a Dataset","heading":"5.3.3 Summary of the Variables","text":"order better understand data, may also want understand distribution type variables. summary() function provides quick summary statistics variables dataframe.command return numerical variable minimum maximum value variable takes, well median, mean, 1/3rd quartile.case strings, command return frequency common values found variable","code":"\nlibrary(gapminder)\n\n#Create the gap dataset from gapminder function\ngap <- gapminder\n\n#Print to the console summary statistics of teh main variable\nsummary(gap)\n#>         country        continent        year     \n#>  Afghanistan:  12   Africa  :624   Min.   :1952  \n#>  Albania    :  12   Americas:300   1st Qu.:1966  \n#>  Algeria    :  12   Asia    :396   Median :1980  \n#>  Angola     :  12   Europe  :360   Mean   :1980  \n#>  Argentina  :  12   Oceania : 24   3rd Qu.:1993  \n#>  Australia  :  12                  Max.   :2007  \n#>  (Other)    :1632                                \n#>     lifeExp           pop              gdpPercap       \n#>  Min.   :23.60   Min.   :6.001e+04   Min.   :   241.2  \n#>  1st Qu.:48.20   1st Qu.:2.794e+06   1st Qu.:  1202.1  \n#>  Median :60.71   Median :7.024e+06   Median :  3531.8  \n#>  Mean   :59.47   Mean   :2.960e+07   Mean   :  7215.3  \n#>  3rd Qu.:70.85   3rd Qu.:1.959e+07   3rd Qu.:  9325.5  \n#>  Max.   :82.60   Max.   :1.319e+09   Max.   :113523.1  \n#> "},{"path":"data-visualization-with-ggplot.html","id":"data-visualization-with-ggplot","chapter":"6 Data Visualization with ggplot","heading":"6 Data Visualization with ggplot","text":"","code":""},{"path":"data-visualization-with-ggplot.html","id":"introduction-to-ggplot","chapter":"6 Data Visualization with ggplot","heading":"6.1 Introduction to ggplot","text":"ggplot2 package widely used package making plots R. allows us draw wide variety graphs preserving consistent approach building impressive data visualizations.‘gg’ begin ggplot stands ‘grammar graphics’, reference Leland Wilkinson’s book ‘Grammar Graphics’ (1999). Grammar Graphics puts forward notion plot (e.g. scatterplot, barplot) can expressed set components make plot graphic, data represented plot (lines, points, etc.), variables mapped coordinates plotting shape color, transformation statistical summary required, .ggplot allows build visualization layer--layer specifyingthe data individual variables extracteda geom specifies data represented plot (e.g. points, lines, bars)aesthetics (aes) map variabels dataset graphical elements plot (e.g. position axes, size, shape, colour)Additional steps often necessary improve visualizations include adding layers graph :Specifying coordinatesSpecifying scalesSetting labels guidesDividing visualization different mini-plots (facet)follows build graph step step introducing key commands part ggplot.","code":""},{"path":"data-visualization-with-ggplot.html","id":"selecting-the-data","chapter":"6 Data Visualization with ggplot","heading":"6.2 Selecting the Data","text":"initial step drawing plot ggplot() involves selecting dataset want draw. functions used within ggplot require data ‘tidied’, means, organizing data every column variable, every row observation, every cell single valueWe specify dataset calling ggplot() function including within brackets name dataframe want draw .examples plot gapminder dataset. 142 countries, package provides values life expectancy, GDP per capita, population, every five years, 1952 2007. dataset can loaded package gapminder.can tell ggplot use data typing ggplot(data = gapminder) (code also work omit data = simply specify dataset within parentheses)specifying dataset within ggplot() function without additional command result plotting empty grey panel. need specify different columns data frame represented plot.","code":"\n#Install package\n#install.packages(\"gapminder\")\n\n#Load the package\nlibrary(gapminder)\n\n#Show the first few rows\nhead(gapminder)\n#> # A tibble: 6 × 6\n#>   country     continent  year lifeExp      pop gdpPercap\n#>   <fct>       <fct>     <int>   <dbl>    <int>     <dbl>\n#> 1 Afghanistan Asia       1952    28.8  8425333      779.\n#> 2 Afghanistan Asia       1957    30.3  9240934      821.\n#> 3 Afghanistan Asia       1962    32.0 10267083      853.\n#> 4 Afghanistan Asia       1967    34.0 11537966      836.\n#> 5 Afghanistan Asia       1972    36.1 13079460      740.\n#> 6 Afghanistan Asia       1977    38.4 14880372      786.\n#load ggplot (it could be loaded from the tidyverse package)\nlibrary(ggplot2)\n\nggplot(data = gapminder)"},{"path":"data-visualization-with-ggplot.html","id":"map-variables-to-plot-elements-aes","chapter":"6 Data Visualization with ggplot","heading":"6.3 Map variables to plot elements (‘aes’)","text":"Generating visualization R requires specify connections variables data plot elements screen, colours, points, shapes. using ggplot() connections called aesthetic mappings.ggplot map variables data properties can see graph using aes() function (aes short ‘aesthetic’).\nColumn names given ‘aesthetic’ elements ggplot function, wrapped mapping = aes(...) argument. give specifications separated comma without quotation marks.common aesthetics defined within mapping = aes(...) argument :x: variable whose values plotted x axisy: variable whose values plotted y axisIn example Kieran Healy’s book “Data Visualization. Practical Introduction” plot life expectancy per capita GDP country-years data. code , specifying dataset work (gapminder), variable want plot x axis (gdpPercap) y axis (lifeExp)Specifying dataset within ggplot() function mappings (variables visualized) however generate empty plot variables listed axis. yet declare sort plot want use visualize variables. order plot selected variables need add layer plot picking geom_ functions.","code":"\nggplot(data = gapminder, \n    mapping = aes(x = gdpPercap, y = lifeExp))"},{"path":"data-visualization-with-ggplot.html","id":"select-the-geometric-representations-geom","chapter":"6 Data Visualization with ggplot","heading":"6.4 Select the geometric representations (‘geom’)","text":"specified mapping, add another ‘layer’ calling function specifying graphical representation mappings like see. calling one many geom_ functions. preceded + sign adding layer plot.example , select function geom_point() plot x y values scatterplot. row gapminder dataset now x coordinate (gdpPercap), y coordinate (lifeExp), designated geometric representation (point).","code":"\nggplot(data = gapminder, \n    mapping = aes(x = gdpPercap, y = lifeExp)) +\n    geom_point()"},{"path":"data-visualization-with-ggplot.html","id":"available-geoms","chapter":"6 Data Visualization with ggplot","heading":"6.4.1 Available geoms","text":"graph , represented variables gdpPercap lifeExp coordinates points selecting geom geom_point.broader range geometric representation available ggplot graph:Bar charts geom_bar() geom_col()stat_count()Histograms frequency polygons geom_freqpoly()geom_histogram()stat_bin()Smoothed density estimates geom_density()stat_density()box whiskers plot geom_boxplot()stat_boxplot()Connect observations geom_path() geom_line() geom_step() Reference lines: horizontal, vertical, diagonal geom_abline() geom_hline()geom_vline() Reference lines: horizontal, vertical, diagonal geom_abline() geom_hline()geom_vline() Heatmap 2d bin counts geom_bin_2d()stat_bin_2d() Heatmap 2d bin counts geom_bin_2d()stat_bin_2d() Dot plot geom_dotplot() Dot plot geom_dotplot() Jittered points geom_jitter() Jittered points geom_jitter() Polygons reference map geom_map() Polygons reference map geom_map() Points geom_point() Points geom_point() Smoothed conditional means geom_smooth()stat_smooth() Smoothed conditional means geom_smooth()stat_smooth() Text geom_label()geom_text() Text geom_label()geom_text() Rectangles geom_raster() geom_rect()geom_tile() Rectangles geom_raster() geom_rect()geom_tile() Violin plot geom_violin() Violin plot geom_violin()Additional geoms can loaded specific packages extends functionalities ggplot. popular examples :ggridges package create ridgeline plotsggrepel package repel overlapping text labels.","code":"\nggplot(data = gapminder, \n       mapping = aes(x=continent)) + \n  geom_bar()\nggplot(data=gapminder, \n       mapping = aes(x=lifeExp)) + \n    geom_histogram(bins=60)\nlibrary(gapminder)\nggplot(data=gapminder, aes(x=lifeExp)) + \n    geom_density()\nggplot(data=gapminder, \n       aes(x=continent, \n           y=lifeExp)) +\n    geom_boxplot(outlier.size=2)\ngapminder %>%\n  filter(country == \"United Kingdom\") %>%\n   ggplot(mapping = aes(x = year, \n                     y = gdpPercap)) +\n  geom_line()"},{"path":"data-visualization-with-ggplot.html","id":"layer-different-geoms","chapter":"6 Data Visualization with ggplot","heading":"6.4.2 Layer different geoms","text":"possible layer different geom_ plot (e.g. line top scatterplot) using + sign introduce new layer. geom_ function inherit ggplot function instructions regarding variables mapped, although possible give geoms different commands regarding variables plotted within parentheses.instance, example add additional layer top scatterplot calling geom_smooth() calculate draw smoothed line, including ribbon showing standard error.Note trend line blocking certain points, ‘top layer’ plot. geom layers appear early command drawn first, can obscured geom layers come .","code":"\nggplot(data = gapminder, \n    mapping = aes(x = gdpPercap, y = lifeExp)) +\n    geom_point() +\n    geom_smooth()"},{"path":"data-visualization-with-ggplot.html","id":"additional-aesthetics","chapter":"6 Data Visualization with ggplot","heading":"6.5 Additional aesthetics","text":"position element x y axis aesthetics plot can defined. aesthetics common different ggplot visualizations :color: variable whose values determine color lines pointsfill: variable whose values determine color filled objectssize: variable whose values determine size pointsshape: variable whose values determine shapes pointslinetype: variable whose values determine line type","code":""},{"path":"data-visualization-with-ggplot.html","id":"mapping-aesthetics-to-a-variable","chapter":"6 Data Visualization with ggplot","heading":"6.5.1 Mapping Aesthetics to a Variable","text":"first way map aesthetic values variable dataset. , need set properties inside mapping = aes() function. name variable need wrapped within quotation marks.instance figure individual data points colored according continent country represented. result, 5 different colours selected, one distinct value continent variable. legend explaining colors linked continents added automatically plot. also possible map continuous variables color aesthetic. case ggplot produce gradient scale.mapping fill colour aesthetic variable, colour applied value selected automatically ggplot colour scale. possible change scale applying different colour palette.instance, scale_fill_brewer (inside geom) scale_colour_brewer (border geom) can also added use pre-created palettes https://colorbrewer2.org (list see https://ggplot2.tidyverse.org/reference/scale_brewer.html)also possible set manually colour assigned variables using scale_fill_manual() scale_colour_manual().","code":"\nggplot(data = gapminder, \n    mapping = aes(x = gdpPercap, \n                  y = lifeExp, \n                  color = continent)) +\n    geom_point()    \nggplot(data = gapminder, \n    mapping = aes(x = gdpPercap, y = lifeExp, color = continent)) +\n    geom_point() +\n  scale_colour_brewer(palette = \"Greens\") \n# Import the dataset world\nggplot(data = gapminder, \n    mapping = aes(x = gdpPercap, y = lifeExp, color = continent)) +\n    geom_point() +\n  scale_colour_manual(values=c(\"red\", \"blue\", \"green\", \"gray\", \"pink\"))"},{"path":"data-visualization-with-ggplot.html","id":"setting-the-aesthetic-manually","chapter":"6 Data Visualization with ggplot","heading":"6.5.2 Setting the aesthetic manually","text":"cases however may want set property specific value (e.g. change colour points scatterplot blue). , need set properties outside mapping = aes() layer instead inside geom(). value assigning name object R environment, needs wrapped within quotation marks.instance, example Healy set color points scatterplot purple, set color line orange, manually set size.Colours can assigned using:\n- Colour name (e.g. geom_bar(colour=\"red\"))\n- Hexidecimal Color Codes: (e.g. geom_bar(colour=\"#FF9999\")). See http://www.cookbook-r.com/Graphs/Colors_(ggplot2)/aesthetic specified manually setting value inside specific geom. instance, visualization specified colour points, also shape (pch), size (size), transparency (alpha).","code":"\nggplot(data = gapminder, \n    mapping = aes(x = gdpPercap, y = lifeExp)) +\n    geom_point(color = \"purple\") +\n    geom_smooth(color = \"orange\", size = 2) \nggplot(data = gapminder, \n    mapping = aes(x = gdpPercap, y = lifeExp)) +\n    geom_point(color=\"blue\", pch=17, size=2, alpha=1/4) +\n    geom_smooth(color = \"orange\", size = 2) "},{"path":"data-visualization-with-ggplot.html","id":"axes","chapter":"6 Data Visualization with ggplot","heading":"6.6 Axes","text":"ggplot automatically pick scale axis, type coordinate space. plots Cartesian (linear X vs linear Y) coordinate space.","code":""},{"path":"data-visualization-with-ggplot.html","id":"axis-limits","chapter":"6 Data Visualization with ggplot","heading":"6.6.1 Axis Limits","text":"case plot gapminder, axes selected based values data origin x y axis set zero.\npossible modify limits x axis using function xlim(START, END) y axis using function ylim(START, END)instance, may want plot life expectancy scale starts 0 instead lowest value plot","code":"\nggplot(data = gapminder, \n    mapping = aes(x = gdpPercap, y = lifeExp)) +\n    geom_point(color = \"purple\") +\n    geom_smooth(color = \"orange\", size = 1.5) +\n  ylim(0,90)"},{"path":"data-visualization-with-ggplot.html","id":"transform-the-coordinates","chapter":"6 Data Visualization with ggplot","heading":"6.6.2 Transform the Coordinates","text":", can control coordinate space using coord() functions.coord_flip() interchanges X Y axes. instance, code , use coord_flip() make horizontal bar chart.","code":"\nggplot(gapminder, aes(x=continent)) + \n    geom_bar(aes(y=..count../12)) +\n    labs(y=\"Number of countries\") +\n    coord_flip()"},{"path":"data-visualization-with-ggplot.html","id":"scales","chapter":"6 Data Visualization with ggplot","heading":"6.7 Scales","text":"graph scale, simply scale, refers set numbers indicate certain intervals graph used measurement. simple words, scale set numbers help measure quantify objects.using ggplot2, scales automatically generated, packages provides set tools override default breaks, labels, transformations necessary facilitate interpretation thed dataFor instance example Healy’s book, GDP per Capita countries comparative high gdp per capita right end x axis, large number observations bunched left side. order improve legibility graph possible transform x-axis scale linear scale log scale using scale_x_log10() function.built functions axis transformations case numberical variables :scale_x_log10(), scale_y_log10() : log10 transformationscale_x_sqrt(), scale_y_sqrt() : sqrt transformationscale_x_reverse(), scale_y_reverse() : reverse coordinatesBy default ggplot present large numbers x axis using scientific notation. can replace scientific notation x-axis dollar value actually represents using scale_ functions.examples manually alter scales graph, see page.","code":"\nggplot(data = gapminder, \n    mapping = aes(x = gdpPercap, y = lifeExp)) +\n    geom_point() +\n    geom_smooth() +\n    scale_x_log10()\nggplot(data = gapminder, \n    mapping = aes(x = gdpPercap, y = lifeExp)) +\n    geom_point() +\n    geom_smooth() +\n    scale_x_log10(labels = scales::dollar)"},{"path":"data-visualization-with-ggplot.html","id":"labels","chapter":"6 Data Visualization with ggplot","heading":"6.8 Labels","text":"ggplot can alter labels found graph using labs() function. Values can set within function include:xytitlesubtitlecaption","code":"\nggplot(data = gapminder, \n    mapping = aes(x = gdpPercap, y = lifeExp)) +\n    geom_point() +\n    geom_smooth() +\n    scale_x_log10(labels = scales::dollar) +\n    labs(x = \"GDP Per Capita\", \n         y = \"Life Expectancy in Years\", \n         title = \"Economic Growth and Life Expectancy\", \n         subtitle = \"Data points are country-years\", \n         caption = \"Source: Gapminder.\")"},{"path":"data-visualization-with-ggplot.html","id":"facets","chapter":"6 Data Visualization with ggplot","heading":"6.9 Facets","text":"cases much data display clearly single plot. result, want break single plot sub-plots according values one variables. called ‘faceting’. Facets commonly used much data display clearly single plot.","code":""},{"path":"data-visualization-with-ggplot.html","id":"facet_wrap","chapter":"6 Data Visualization with ggplot","heading":"6.9.1 facet_wrap()","text":"call functionfacet_wrap(). Within command, use tilde symbol ‘~’ indicate column name form facet. can also use ncol argument facet_wrap() control number columns used lay facets.Overall, facet_wrap() function best used want series small multiples based single categorical variable.example break visualization different facets, containing observations given value variable continent.","code":"\nggplot(data = gapminder, \n    mapping = aes(x = gdpPercap, y = lifeExp)) +\n    geom_point() +\n    geom_smooth() +\n    scale_x_log10(labels = scales::dollar) +\n    labs(x = \"GDP Per Capita\", \n         y = \"Life Expectancy in Years\", \n         title = \"Economic Growth and Life Expectancy\", \n         subtitle = \"Data points are country-years\", \n         caption = \"Source: Gapminder.\") +\n    facet_wrap( ~ continent, ncol=1)"},{"path":"data-visualization-with-ggplot.html","id":"facet_grid","chapter":"6 Data Visualization with ggplot","heading":"6.9.2 facet_grid()","text":"also possible cross-classify data two categorical variables. case can use function facet_grid() lay plot true two-dimensional arrangement.instance, graph break plot separate sub-plot, one including data one specific year one continent. organized grid using facet_grid().","code":"\nlibrary(tidyverse)\n\nggplot(data = filter(gapminder, year %in% c(1977, 1987, 1997, 2007)), \n       mapping = aes(x = lifeExp)) +\n    geom_histogram() +\n    labs(x = \"Life Expectancy in Years\", \n         title = \"Life Expectancy\", \n         caption = \"Source: Gapminder.\") +\n    facet_grid(continent ~ year)"},{"path":"data-visualization-with-ggplot.html","id":"themes","chapter":"6 Data Visualization with ggplot","heading":"6.10 Themes","text":"overall appearance plot can modified using theme() functions. default theme grey background maximizes contrast, number existing themes can loaded.instance, figure apply plot theme_bw.GGplot comes list complete graphical themes can applied graph customised (see https://ggplot2.tidyverse.org/reference/ggtheme.html)theme_grey()theme_bw()theme_linedraw()theme_light()theme_dark()theme_minimal()theme_classic()theme_void()theme_test()custom themes can launched installing loading packages:E.g. package ggthemes (https://jrnold.github.io/ggthemes/index.html) includes “Economist”-type theme","code":"\nggplot(data = gapminder, \n    mapping = aes(x = gdpPercap, y = lifeExp)) +\n    geom_point() +\n    geom_smooth() +\n    scale_x_log10(labels = scales::dollar) +\n    labs(x = \"GDP Per Capita\", \n         y = \"Life Expectancy in Years\", \n         title = \"Economic Growth and Life Expectancy\", \n         subtitle = \"Data points are country-years\", \n         caption = \"Source: Gapminder.\") +\n     theme_bw()\n#install.packages(\"ggthemes\")\nlibrary(ggthemes)\n\n#Plotting geom_bar without count variable\nggplot(data = gapminder, \n    mapping = aes(x = gdpPercap, y = lifeExp)) +\n    geom_point() +\n    geom_smooth() +\n    scale_x_log10(labels = scales::dollar) +\n    labs(x = \"GDP Per Capita\", \n         y = \"Life Expectancy in Years\", \n         title = \"Economic Growth and Life Expectancy\", \n         subtitle = \"Data points are country-years\", \n         caption = \"Source: Gapminder.\") +\n  theme_economist() "},{"path":"data-visualization-with-ggplot.html","id":"customizing-themes","chapter":"6 Data Visualization with ggplot","heading":"6.10.1 Customizing Themes","text":"function theme() can used manually define different graphical elements plot, including legends, axis lines, grid lines, panel borders, background color, etc.function theme() possible edit:elements affect plot wholeAxes ElementsLegendPanel Element","code":""},{"path":"data-visualization-with-ggplot.html","id":"legend-position","chapter":"6 Data Visualization with ggplot","heading":"6.10.2 Legend Position","text":"can control position legend using legend.position within theme.theme(legend.position=\"none\") hide legendtheme(legend.position=\"bottom\") move legend underneath graphtheme(legend.position=\"top\") move legend graphtheme(legend.position=\"left\") move legend left graphtheme(legend.position=c(0.2, 0.7))move legend specific point within graph","code":""},{"path":"data-visualization-with-ggplot.html","id":"exporting-a-graph","chapter":"6 Data Visualization with ggplot","heading":"6.11 Exporting a graph","text":"multiple ways export graphs.","code":""},{"path":"data-visualization-with-ggplot.html","id":"ggsave","chapter":"6 Data Visualization with ggplot","heading":"6.11.1 GGSave()","text":"can use ggsave() function save recent plot displayed. function requires specify name file. generated.","code":"\nggsave(filename = \"my_figure.png\")"},{"path":"data-visualization-with-ggplot.html","id":"rmarkdown","chapter":"6 Data Visualization with ggplot","heading":"6.11.2 RMarkdown","text":"code within RMarkdown document, plot automatically embedded report knitted. possible specify size figure setting parameter fig.width fig.height inside curly braces beginning code chunk. instance, starting code chunk {r mygraph, fig.width = 9, fig.height = 6} braces section resize image make figure 9 inch wide 6 inch high.","code":""},{"path":"data-visualization-with-ggplot.html","id":"extensions-and-galleries","chapter":"6 Data Visualization with ggplot","heading":"6.12 Extensions and Galleries","text":"","code":""},{"path":"data-visualization-with-ggplot.html","id":"graph-gallery","chapter":"6 Data Visualization with ggplot","heading":"6.12.1 Graph Gallery","text":"Numerous galleries examples plots generated using ggplot can found online.\nexcellent starting point understand different types visualizations can built using ggplot r-graph-gallery.comYou can browse examples available identify code snippets can reused code:","code":""},{"path":"data-visualization-with-ggplot.html","id":"extensions","chapter":"6 Data Visualization with ggplot","heading":"6.12.2 Extensions","text":"ggplot package able draw large number plot types capable handling almost endless range customizations, also possible augment functionalities installing extensions come form packages can installed loaded R environment.helpful starting point identify extensions ggplot2 Extension Gallery.","code":""},{"path":"data-visualization-with-ggplot.html","id":"esquisse","chapter":"6 Data Visualization with ggplot","heading":"6.12.3 Esquisse","text":"Esquisse extension provide point--click interface help generating code required generate ggplot visualisations.extension contained package needs installed (first time) loaded packageOnce package loaded, can initiate plotting dataset environment using function esquisser(), adding name dataset within parentheses.instance, plot gapminder dataset can use following codeThe esquisser() launch interfaceYou can map variables onto different graphical elements selecting variable names drag--drop aesthetics boxes.Finally, can select geom button top left corner. geometry automatically selected represent data, according data type.bottom-right corner can retrieve code used produce plot. can copy code clipboard insert current script, can amend .","code":"\ninstall.packages(\"esquisse\")\n\nlibrary(esquisse)\n#load gapminder dataset\nlibrary(gapminder)\n\n#load esquisse\nlibrary(esquisse)\n\nesquisser(gapminder)"},{"path":"types-of-visualizations.html","id":"types-of-visualizations","chapter":"7 Types of visualizations","heading":"7 Types of visualizations","text":"","code":""},{"path":"types-of-visualizations.html","id":"bar-plots-for-discrete-variables-with-geom_bar","chapter":"7 Types of visualizations","heading":"7.1 Bar plots for discrete variables with geom_bar()","text":"Bar plots often used visualize distribution discrete variable, like continent. ggplot2, visualization can achieved using geom geom_bar().geom_bar() requires following aestetics (aes):\n- x: default geom_bar count number observations category plot bar lengthsIt possible transform calculation used determine height bar. case, need provide also additional aesthetic y determine length bar.instance, instead counting rows dataset belong given contintent, may want plot number countries continent. Since 12 different observations country (one per year) gapminder dataset, can calculate number countries diving total number observations continent 12.","code":"\nggplot(data = gapminder, \n       mapping = aes(x=continent)) + \n  geom_bar()\nggplot(gapminder, aes(x=continent)) + \n    geom_bar(aes(y=..count../12)) +\n    labs(y=\"Number of countries\")"},{"path":"types-of-visualizations.html","id":"histograms","chapter":"7 Types of visualizations","heading":"7.2 Histograms","text":"","code":"\nggplot(data=gapminder, \n       mapping = aes(x=lifeExp)) + \n    geom_histogram(bins=60)"},{"path":"types-of-visualizations.html","id":"density-plots","chapter":"7 Types of visualizations","heading":"7.3 Density plots","text":"Density plots can used provide useful graphical summary continuous variables. Instead dividing observations bins histogram, geom creates smoothed density curveWithin ggplot, function geom_density() can used calculate plot smoothed frequency distribution.density plot life expectancy reveals bimodal distribution. order explore distribution result differences among countries different continent, can addin ggplot2 another aesthetic attribute fill=continent, result plotting different distributions across continent. order see see different distributions using transparent colors (alpha=) makes easier see different distributions across continent.","code":"\nlibrary(gapminder)\nggplot(data=gapminder, aes(x=lifeExp)) + \n    geom_density(size=1.5, fill=\"pink\", alpha=0.3)\nggplot(data=gapminder, aes(x=lifeExp, fill=continent)) +\n    geom_density(alpha=0.3)"},{"path":"types-of-visualizations.html","id":"boxplots","chapter":"7 Types of visualizations","heading":"7.4 Boxplots","text":"order view distributions life expectancy across continents, can create create boxplotThe continents ordered alphabetically default. might useful order mean median life expectancy. order , need first use reorder function sort levels continent, passing information ggplot using “pipe” notation (%>%)","code":"\nggplot(data=gapminder, \n       aes(x=continent, \n           y=lifeExp,\n           fill=continent)) +\n    geom_boxplot(outlier.size=2)\ngapminder %>% \n    mutate(continent = reorder(continent, lifeExp, FUN=median)) %>%\n    ggplot(aes(x=continent, y=lifeExp, fill=continent)) +\n    geom_boxplot(outlier.size=2)"},{"path":"types-of-visualizations.html","id":"time-series-plots","chapter":"7 Types of visualizations","heading":"7.5 Time Series plots","text":"life expectancy changed time across continents?\nggplot2 can use geom_line() function create line plot.geom_line() takes three arguments:x: variable mapped x axis. time series plot, timey: variable mapped y axisgroup: variable along different observations groupedThen, rather joining points, fit linear regression lines continent.","code":"\nlibrary(dplyr)\n\ngapmindermedian <- gapminder %>%\n    group_by(continent, year) %>%\n    summarise(lifeExp=median(lifeExp))\n\nggplot(data = gapmindermedian,\n       mapping = aes(x = year, \n                     y = lifeExp, \n                     color = continent,\n                     group = continent)) +\n     geom_line(size=1) + \n     geom_point(size=1.5)\n\ngapmindermedian <- gapminder %>%\n    group_by(continent, year) %>%\n    summarise(lifeExp=median(lifeExp))\n\nggplot(gapmindermedian, aes(x=year, y=lifeExp, color=continent)) +\n    geom_point(size=1.5) +\n    geom_smooth(aes(fill=continent), method=\"lm\")"},{"path":"types-of-visualizations.html","id":"scatterplots","chapter":"7 Types of visualizations","heading":"7.6 Scatterplots","text":"can now explore relationship life expectancy GDP scatterplotThe variable gdpPercap skewed since observations high value. result, results better plotted log scale.illustrative example, code takes gapminder dataset plots relationship life expectancy GDP per capita.","code":"\nggplot(data=gapminder,\n       mapping = aes(x = gdpPercap, \n                     y = lifeExp,\n                     color = continent)) +\n  geom_point()\n\nggplot(data=gapminder,\n       mapping = aes(x = gdpPercap, \n                     y = lifeExp)) +\n  geom_point(aes(color = continent)) +\n  geom_smooth(method=\"loess\") +\n    scale_x_log10(labels=scales::comma)\nggplot(data = gapminder, \n       mapping = aes(x = gdpPercap, \n                     y = lifeExp,\n                     color = continent)) + \n  geom_point() + \n  coord_cartesian() + \n  scale_x_log10()  + \n  labs(x = \"log GDP\", \n       y = \"Life Expectancy\", \n       title = \"A Gapminder Plot\")"},{"path":"data-wrangling-with-dplyr.html","id":"data-wrangling-with-dplyr","chapter":"8 Data Wrangling with dplyr","heading":"8 Data Wrangling with dplyr","text":"Data wrangling - also called data cleaning, data remediation, data munging - refers variety processes designed transform raw data readily used formats.\nIndeed, key step dealing real-word datasets, since often present information precise way relevant analysis. Often time process analysing data spent manipualting cleaning data.","code":""},{"path":"data-wrangling-with-dplyr.html","id":"dplyr","chapter":"8 Data Wrangling with dplyr","heading":"8.1 Dplyr","text":"Dplyr package (part tidyverse) includes number helpful functions can used manipulate data order transform helpful format.section explore commonly used dplyr functions exploring transforming data frames. input output functions dataframes. includeselect() select variables dataframerename() change title variablefilter() select number observations meet certain criteriaarrange() reorder observationsmutate() generate new variables amend existing onesgroup_by() divide observations groupssummarize() generate new variables containing information groups observationscount() count number observations given valueIn order access functions used section, need load dplyr beginning session. can also done loading tidyverseIn section explore use data manipulation toolsthe gapminder dataset. starting new Rstudio session run following code load gapminder data environment.","code":"\n\n#load tidyverse\nlibrary(tidyverse)\n\n#Alternatively load dplyr\nlibrary(dplyr)\n#load gapminder\nlibrary(gapminder)"},{"path":"data-wrangling-with-dplyr.html","id":"the-pipe-operator","chapter":"8 Data Wrangling with dplyr","heading":"8.2 The pipe (%>%) operator","text":"Similarly functions included R, dplyr functions can launched calling name functions followed series arguments specifying input. case functions part dplyr package takes form :call function (e.g. select()),within parentheses, first specify name dataset like manipulate (e.g. gapminder)list input function (e.g. name columns selected)see detail examples , possible call different dplyr functions using different syntax takes advantage pipe (%>%) operator create code easier write understand.syntax looks like :call name dataset manipulatedadd %>% operator (read ‘’). pass value data next stepcall function want use manipulate dataFor instance two lines code equivalent ways display top lines gapminder dataset:lines code return information:syntax facilitate chaining different steps analysis. perform another transformation data, can add %>% operator (read ‘’) pass data next operation. avoids need save data step new existing data frame.","code":"\nhead(gapminder)\n\ngapminder %>% head#> # A tibble: 6 × 6\n#>   country     continent  year lifeExp      pop gdpPercap\n#>   <fct>       <fct>     <int>   <dbl>    <int>     <dbl>\n#> 1 Afghanistan Asia       1952    28.8  8425333      779.\n#> 2 Afghanistan Asia       1957    30.3  9240934      821.\n#> 3 Afghanistan Asia       1962    32.0 10267083      853.\n#> 4 Afghanistan Asia       1967    34.0 11537966      836.\n#> 5 Afghanistan Asia       1972    36.1 13079460      740.\n#> 6 Afghanistan Asia       1977    38.4 14880372      786."},{"path":"data-wrangling-with-dplyr.html","id":"selecting-variables","chapter":"8 Data Wrangling with dplyr","heading":"8.3 Selecting Variables","text":"many real-world datasets include large number variables (columns), sometimes need include subset analysis.\nselect() function can used select variables data frame based name.\norder call subset variables need :call function select(),within parentheses, first specify name datasetand list name variables (without quotation marks separated comma) like retain order appearIn example first load gapminder dataset select year, country, gdpPercap variables. narrower dataset stored different object.Alternatively possible insert function chain transformation using pipe symbol %>%. includes following steps:summon dataframepass next step using pipe symbol %>%use select() function choose variables want, listing within parentheses.","code":"\nlibrary(tidyverse)\n\n# Load gapmidner data\nlibrary(gapminder)\n\n#Select three variables and place them in a new object \ngap_narrow <- select(gapminder, year, country, gdpPercap)\n\n#print the first rows of the gap_narrow dataset\nhead(gap_narrow )\n#> # A tibble: 6 × 3\n#>    year country     gdpPercap\n#>   <int> <fct>           <dbl>\n#> 1  1952 Afghanistan      779.\n#> 2  1957 Afghanistan      821.\n#> 3  1962 Afghanistan      853.\n#> 4  1967 Afghanistan      836.\n#> 5  1972 Afghanistan      740.\n#> 6  1977 Afghanistan      786.\n# Alternative approach with %>% to select three variables and place them in a new object \ngap_narrow <- gapminder %>% \n  select(year, country, gdpPercap)"},{"path":"data-wrangling-with-dplyr.html","id":"removing-variables","chapter":"8 Data Wrangling with dplyr","heading":"8.3.1 Removing variables","text":"Instead specifying variables want retain, can also use select function specify variables like drop. order , need add minus (-) sign front name variable like remove.code removed variable gdpPercap pop gapminder dataset, retaining existing variables order","code":"\n\ngap_narrow <- gapminder %>% \n  select(-gdpPercap, -pop)"},{"path":"data-wrangling-with-dplyr.html","id":"selecting-a-range-of-variables","chapter":"8 Data Wrangling with dplyr","heading":"8.3.2 Selecting a Range of Variables","text":"case want retain range variable, possible list first last variable want retain existing dataset, separated :.","code":"\n\ngap_narrow <- gapminder %>% \n  select(year:gdpPercap)\n  "},{"path":"data-wrangling-with-dplyr.html","id":"selection-helpers","chapter":"8 Data Wrangling with dplyr","heading":"8.3.3 Selection Helpers","text":"possible use selection helpers select variables whose name includes certain characters. Examples functions can called inside select() include:starts_with(): select variables whose name starts prefix.ends_with(): select variables whose name ends suffix.contains(): select variables whose name contains literal string.matches(): Matches regular expression.instance, example take pre-loaded dataset named iris select variable whose name starts “Petal” ends “Width”","code":"\n\nnew_iris <- iris %>% select(Species, starts_with(\"Petal\") & ends_with(\"Width\"))\n\nhead(new_iris)\n#>   Species Petal.Width\n#> 1  setosa         0.2\n#> 2  setosa         0.2\n#> 3  setosa         0.2\n#> 4  setosa         0.2\n#> 5  setosa         0.2\n#> 6  setosa         0.4"},{"path":"data-wrangling-with-dplyr.html","id":"rename-variables","chapter":"8 Data Wrangling with dplyr","heading":"8.4 Rename Variables","text":"often case name variables dataset clearly informative content variable.\ncan change name columns dataset rename() function. function takes syntax \"new_name\" = \"old_name\" within parentheses.\nusing function, column names changed rows column order affected.Similarly functions part dplyr, possible use pipe %>% operator chain function.","code":"\n#load gapminder data\nlibrary(gapminder)\n\ngap_renamed <- rename( gapminder, \"population\" = \"pop\")\n\n#List the name of the columns\ncolnames(gap_renamed) \n#> [1] \"country\"    \"continent\"  \"year\"       \"lifeExp\"   \n#> [5] \"population\" \"gdpPercap\"\ngap_renamed <- gapminder %>%\n  rename(\"population\" = pop)\n\n#Print the name of the variables\ncolnames(gap_renamed)\n#> [1] \"country\"    \"continent\"  \"year\"       \"lifeExp\"   \n#> [5] \"population\" \"gdpPercap\""},{"path":"data-wrangling-with-dplyr.html","id":"subset-observations-with-filter","chapter":"8 Data Wrangling with dplyr","heading":"8.5 Subset Observations with Filter()","text":"filter() function used subset data frame, retaining rows condition expressed within filter() true.instance, possible retain observations (row) variable takes certain value.example want retain observations gapminder dataset pertain Argentina. order , filter rows variable country equal (==) string Argentina","code":"\ngapminder_argentina <- gapminder %>%\n    filter(country == \"Argentina\")\n\nhead (gapminder_argentina)  \n#> # A tibble: 6 × 6\n#>   country   continent  year lifeExp      pop gdpPercap\n#>   <fct>     <fct>     <int>   <dbl>    <int>     <dbl>\n#> 1 Argentina Americas   1952    62.5 17876956     5911.\n#> 2 Argentina Americas   1957    64.4 19610538     6857.\n#> 3 Argentina Americas   1962    65.1 21283783     7133.\n#> 4 Argentina Americas   1967    65.6 22934225     8053.\n#> 5 Argentina Americas   1972    67.1 24779799     9443.\n#> 6 Argentina Americas   1977    68.5 26983828    10079."},{"path":"data-wrangling-with-dplyr.html","id":"logical-operations","chapter":"8 Data Wrangling with dplyr","heading":"8.5.1 Logical operations","text":"filter() functions can also used filter rows match multiple conditions. rows returned case depends logical operator connects conditions.","code":""},{"path":"data-wrangling-with-dplyr.html","id":"and","chapter":"8 Data Wrangling with dplyr","heading":"8.5.1.1 & (and)","text":"boolean operator & (**) can used retain rows meet multiple conditionsWhen multiple expressions listed within parentheses separated comma, function retain rows criteria met.example filter observations pertains African countries year 1982. first example, two conditions separated & operator within filter function, second example comma, third example calling different filters sequential order.","code":"\ngapminder_africa <- gapminder %>%\n    filter(continent == \"Africa\" & year > 1982) \n\n#Alternative formulation\ngapminder_africa <- gapminder %>%\n    filter(continent == \"Africa\",\n         year > 1982)  \n\n\n#Alternative formulation\ngapminder_africa <- gapminder %>%\n    filter(continent == \"Africa\") %>%\n    filter(year > 1982) \n\nhead(gapminder_africa)\n#> # A tibble: 6 × 6\n#>   country continent  year lifeExp      pop gdpPercap\n#>   <fct>   <fct>     <int>   <dbl>    <int>     <dbl>\n#> 1 Algeria Africa     1987    65.8 23254956     5681.\n#> 2 Algeria Africa     1992    67.7 26298373     5023.\n#> 3 Algeria Africa     1997    69.2 29072015     4797.\n#> 4 Algeria Africa     2002    71.0 31287142     5288.\n#> 5 Algeria Africa     2007    72.3 33333216     6223.\n#> 6 Angola  Africa     1987    39.9  7874230     2430."},{"path":"data-wrangling-with-dplyr.html","id":"or","chapter":"8 Data Wrangling with dplyr","heading":"8.5.1.2 | (or)","text":"boolean operator & can used retain rows meet multiple conditions, boolean operator (|`) can used retain rows meet multiple conditions.instance, example can filter rows variable continent takes value “Africa” “Asia”.","code":"\n\ngapminder_africa_asia <- gapminder %>%\n    filter(continent == \"Africa\" | continent == \"Asia\")  "},{"path":"data-wrangling-with-dplyr.html","id":"not","chapter":"8 Data Wrangling with dplyr","heading":"8.5.2 ! (not)","text":"! operator can used check condition “” present. instance, can use != filter observations different given value.example exclude analysis rows variable continent takes value “Oceania”.","code":"\n\ngapminder_notOceania <- gapminder %>%\n    filter(continent != \"Oceania\")  "},{"path":"data-wrangling-with-dplyr.html","id":"in-helper","chapter":"8 Data Wrangling with dplyr","heading":"8.5.3 %in% helper","text":"interested subset rows can contain several different values, instead writing long command, useful just give vector values interest.\ncase, %% operator can called retain rows value includes one multiple values using","code":"\n\ngapminder_africa_asia <- gapminder %>%\n    filter(continent %in% c(\"Africa\",\"Asia\") ) "},{"path":"data-wrangling-with-dplyr.html","id":"filter-using-comparison-operators","chapter":"8 Data Wrangling with dplyr","heading":"8.5.4 Filter using Comparison operators","text":"Observations can filtered using comparison operators \n- == (equal )\n- > (greater )\n- >= (greater equal )\n- < (smaller ), etc…instance, example want retain observations year 1982.","code":"\n\ngapminder_recent <- gapminder %>%\n    filter(year > 1982) "},{"path":"data-wrangling-with-dplyr.html","id":"create-and-modify-variables","chapter":"8 Data Wrangling with dplyr","heading":"8.6 Create and modify variables","text":"function mutate() can used add new variables, preserving existing ones, overwrite existing variables name. use variable, number rows affectedWe can perform operations using data existing columns. instance, example first create new variable called gdp multiplying values observations two existing variables (gdp per capita population). newly created column contain results mathematical operation, performed row row.transformations can also involve data found columns. instance, teh example create new variable called gdp_billions transforme scale gdp variables dividing value one billion (10^9)","code":"\ngap_gdp <- gapminder %>%\n    mutate(gdp = gdpPercap*pop) %>%\n  mutate(gdp_billions = gdp/10^9) \n\nhead(gap_gdp)\n#> # A tibble: 6 × 8\n#>   country  continent  year lifeExp     pop gdpPercap     gdp\n#>   <fct>    <fct>     <int>   <dbl>   <int>     <dbl>   <dbl>\n#> 1 Afghani… Asia       1952    28.8  8.43e6      779. 6.57e 9\n#> 2 Afghani… Asia       1957    30.3  9.24e6      821. 7.59e 9\n#> 3 Afghani… Asia       1962    32.0  1.03e7      853. 8.76e 9\n#> 4 Afghani… Asia       1967    34.0  1.15e7      836. 9.65e 9\n#> 5 Afghani… Asia       1972    36.1  1.31e7      740. 9.68e 9\n#> 6 Afghani… Asia       1977    38.4  1.49e7      786. 1.17e10\n#> # … with 1 more variable: gdp_billions <dbl>"},{"path":"data-wrangling-with-dplyr.html","id":"logical-filtering-with-ifelse","chapter":"8 Data Wrangling with dplyr","heading":"8.6.1 Logical filtering with ifelse()","text":"examples illustrate mutate() can used perform transformations rows dataset, cases like return different transformation based certain conditions. creation new variable manipulation existing variables can associated logical test.easy way combine mutate() function ifelse() statement.\nifelse() function tests value column data particular condition (logical test), returns one answer condition==TRUE, another condition==FALSE.ifelse() statements takes three commands ifelse(test_expression, x, y), :test_expression statement returns true false (logic) outcome (e.g. continent == \"Africa\", gdpPercap> 1000)x value returned test_expression TRUEy value returned test_expression FALSE.instance, create new variable called development takes value developed country GDP per capita $25,000, value developing country GDP per capita equal threshold. Remember need two closing brackets, one mutate() function, one ifelse() inside .","code":"\ngap_dev <- gapminder %>%\n    mutate(development = ifelse(gdpPercap> 25000, \n                                \"developed country\", \n                                \"developing country\")) %>%\n  select(country, gdpPercap, development)\n\nhead(gap_dev)\n#> # A tibble: 6 × 3\n#>   country     gdpPercap development       \n#>   <fct>           <dbl> <chr>             \n#> 1 Afghanistan      779. developing country\n#> 2 Afghanistan      821. developing country\n#> 3 Afghanistan      853. developing country\n#> 4 Afghanistan      836. developing country\n#> 5 Afghanistan      740. developing country\n#> 6 Afghanistan      786. developing country"},{"path":"data-wrangling-with-dplyr.html","id":"logical-filtering-with-case_when","chapter":"8 Data Wrangling with dplyr","heading":"8.6.2 Logical filtering with case_when()","text":"times want create label column tests multiple conditions. One option put multiple ifelse() commands inside (ifelse(test1, valueiftest3true, ifelse(test2, valueiftest2true, ifelse(test 3, valueiftest3true)))). however difficult read.alternative option use function case_when().command takes multiple conditions tests order.\ncase_when() takes conditional command format first command ifelse(), however action TRUE condition given, separated tilde ~.\ncatch-command rows satisfy conditions, given end.Let’s use case_when() make label level development countries, distinguishing low-income countries, middle-income countries, advanced economies, assign observations gapminder dataset categories based level GDP per capita.captured possible numerical values GDP per capita, don’t expect catch-output, “”, present new variable.","code":"\ngap_dev <- gapminder %>%\n    mutate(development = case_when(\n      gdpPercap< 25000 ~ \"low-income country\",\n      gdpPercap>= 25000 & gdpPercap<50000  ~ \"middle- income country\", \n      gdpPercap>= 50000  ~ \"advanced economy\",\n      TRUE ~ 'other')) %>%\n  select(country, gdpPercap, development)\n\nhead(gap_dev)\n#> # A tibble: 6 × 3\n#>   country     gdpPercap development       \n#>   <fct>           <dbl> <chr>             \n#> 1 Afghanistan      779. low-income country\n#> 2 Afghanistan      821. low-income country\n#> 3 Afghanistan      853. low-income country\n#> 4 Afghanistan      836. low-income country\n#> 5 Afghanistan      740. low-income country\n#> 6 Afghanistan      786. low-income country"},{"path":"data-wrangling-with-dplyr.html","id":"summarise-across-groups","chapter":"8 Data Wrangling with dplyr","heading":"8.7 Summarise Across Groups","text":"Often need aggregate observations data order gain insights differences across different groups.function group_by() allow us group observations dataset correspond particular value set values.instance, calling group_by() function gapminder dataset specifying continent variable group observations variable takes value (e.g. observation African countries, Asian countries, European countries, etc…)source\nspecified data grouped, can use conjunction summarize() function. variable allows us create new variable(s) applying transformations variables groups (example, continent-specific data frames).sourceThe output new data frame reduced size, one row per group:","code":"\ngdp_by_continents <- gapminder %>%\n    group_by(continent) %>%\n    summarize(mean_gdpPercap = mean(gdpPercap))\n\ngdp_by_continents\n#> # A tibble: 5 × 2\n#>   continent mean_gdpPercap\n#>   <fct>              <dbl>\n#> 1 Africa             2194.\n#> 2 Americas           7136.\n#> 3 Asia               7902.\n#> 4 Europe            14469.\n#> 5 Oceania           18622."},{"path":"data-wrangling-with-dplyr.html","id":"grouping-by-multiple-variables","chapter":"8 Data Wrangling with dplyr","heading":"8.7.1 Grouping by multiple variables","text":"function group_by() also create sub-groups based variable particular variable, run subsequent functions sub-groups.instance, example , instead calculating average value observations belongs continent, group observations continent year calculating average gdpPercap. transformation results creation dataset rows represents unique combination values available variables (e.g. Africa 1957, Asia 1992).","code":"\ngapminder %>%\n    group_by(continent, year) %>%\n    summarize(mean_gdpPercap = mean(gdpPercap))\n#> # A tibble: 60 × 3\n#> # Groups:   continent [5]\n#>    continent  year mean_gdpPercap\n#>    <fct>     <int>          <dbl>\n#>  1 Africa     1952          1253.\n#>  2 Africa     1957          1385.\n#>  3 Africa     1962          1598.\n#>  4 Africa     1967          2050.\n#>  5 Africa     1972          2340.\n#>  6 Africa     1977          2586.\n#>  7 Africa     1982          2482.\n#>  8 Africa     1987          2283.\n#>  9 Africa     1992          2282.\n#> 10 Africa     1997          2379.\n#> # … with 50 more rows"},{"path":"data-wrangling-with-dplyr.html","id":"summarizing-different-variables","chapter":"8 Data Wrangling with dplyr","heading":"8.7.2 Summarizing different variables","text":"use summarize() function possible define different new variables time.instance, example, grouped together different observations value continent variable, can calculate average, lowest, highest life expectancy (lifeExp variable) among observations group.","code":"\ngapminder %>%\n    group_by(continent) %>%\n    summarize(mean_le = mean(lifeExp),\n              min_le = min(lifeExp),\n              max_le = max(lifeExp)) \n#> # A tibble: 5 × 4\n#>   continent mean_le min_le max_le\n#>   <fct>       <dbl>  <dbl>  <dbl>\n#> 1 Africa       48.9   23.6   76.4\n#> 2 Americas     64.7   37.6   80.7\n#> 3 Asia         60.1   28.8   82.6\n#> 4 Europe       71.9   43.6   81.8\n#> 5 Oceania      74.3   69.1   81.2"},{"path":"data-wrangling-with-dplyr.html","id":"counting-the-number-of-observations-by-group","chapter":"8 Data Wrangling with dplyr","heading":"8.7.3 Counting the number of observations by group","text":"common operation analysing dataset involves counting number observations belongs group. can achieve first grouping data, creating new variable using summarize specify within function n() function get number observations group.\ndplyr packages also includes tally() function count observations within group used replace summarize(n())Alternatively can achieve outcome using count() function. count() shortcut function combines group_by() summarize(), useful counting ‘character data’, e.g. labels. can also optionally sort results descending order adding sort=TRUE:","code":"\ngapminder %>%\n    group_by(continent) %>%\n    summarize(observation_num= n())\n#> # A tibble: 5 × 2\n#>   continent observation_num\n#>   <fct>               <int>\n#> 1 Africa                624\n#> 2 Americas              300\n#> 3 Asia                  396\n#> 4 Europe                360\n#> 5 Oceania                24\n\ngapminder %>%\n    group_by(continent) %>%\n    tally()\ngapminder %>%\n    count(continent, sort = TRUE)"},{"path":"data-wrangling-with-dplyr.html","id":"mutate-vs.-summarize","chapter":"8 Data Wrangling with dplyr","heading":"8.7.4 mutate() vs. summarize()","text":"mutate summarize can used create new variables data\ncan confusing decide one appropriate.\nkey distinction whether want output one row group one row row original data frame.applied grouped data, mutate creates new columns many rows original data frame., group_by() can combined mutate(), make new column summary statistics (repeated many times) corresponding sub-grouping interest.applied grouped data, summarize creates data frame many rows groups. output summarize() generally smaller dataframe reduced representation input data.","code":""},{"path":"data-wrangling-with-dplyr.html","id":"sorting-observations","chapter":"8 Data Wrangling with dplyr","heading":"8.8 Sorting observations","text":"can use arrange() sort rows data frame according values certain column.","code":"\ngapminder %>%\n    arrange(year)\n#> # A tibble: 1,704 × 6\n#>    country     continent  year lifeExp      pop gdpPercap\n#>    <fct>       <fct>     <int>   <dbl>    <int>     <dbl>\n#>  1 Afghanistan Asia       1952    28.8  8425333      779.\n#>  2 Albania     Europe     1952    55.2  1282697     1601.\n#>  3 Algeria     Africa     1952    43.1  9279525     2449.\n#>  4 Angola      Africa     1952    30.0  4232095     3521.\n#>  5 Argentina   Americas   1952    62.5 17876956     5911.\n#>  6 Australia   Oceania    1952    69.1  8691212    10040.\n#>  7 Austria     Europe     1952    66.8  6927772     6137.\n#>  8 Bahrain     Asia       1952    50.9   120447     9867.\n#>  9 Bangladesh  Asia       1952    37.5 46886859      684.\n#> 10 Belgium     Europe     1952    68    8730405     8343.\n#> # … with 1,694 more rows"},{"path":"data-wrangling-with-dplyr.html","id":"desc-helper-function","chapter":"8 Data Wrangling with dplyr","heading":"8.8.1 desc() helper function","text":"call arrange() function, default order numbers lowest -> highest.\ninvert standard order, can use ‘descending’ desc() helper function.","code":"\ngapminder %>%\n    arrange(desc(year))\n#> # A tibble: 1,704 × 6\n#>    country     continent  year lifeExp       pop gdpPercap\n#>    <fct>       <fct>     <int>   <dbl>     <int>     <dbl>\n#>  1 Afghanistan Asia       2007    43.8  31889923      975.\n#>  2 Albania     Europe     2007    76.4   3600523     5937.\n#>  3 Algeria     Africa     2007    72.3  33333216     6223.\n#>  4 Angola      Africa     2007    42.7  12420476     4797.\n#>  5 Argentina   Americas   2007    75.3  40301927    12779.\n#>  6 Australia   Oceania    2007    81.2  20434176    34435.\n#>  7 Austria     Europe     2007    79.8   8199783    36126.\n#>  8 Bahrain     Asia       2007    75.6    708573    29796.\n#>  9 Bangladesh  Asia       2007    64.1 150448339     1391.\n#> 10 Belgium     Europe     2007    79.4  10392226    33693.\n#> # … with 1,694 more rows"},{"path":"data-wrangling-with-dplyr.html","id":"sorting-by-multiple-columns","chapter":"8 Data Wrangling with dplyr","heading":"8.8.2 Sorting by multiple columns","text":"possible refine order giving additional columns data.\nexample organize rows first year (recent first), continent.","code":"\ngapminder_with_extra_vars <- gapminder %>%\n    group_by(continent, year) %>%\n    mutate(mean_gdpPercap = mean(gdpPercap),\n              sd_gdpPercap = sd(gdpPercap),\n              mean_pop = mean(pop),\n              sd_pop = sd(pop)) %>%\n    arrange(desc(year), continent)\n\nhead(gapminder_with_extra_vars)\n#> # A tibble: 6 × 10\n#> # Groups:   continent, year [1]\n#>   country      continent  year lifeExp      pop gdpPercap\n#>   <fct>        <fct>     <int>   <dbl>    <int>     <dbl>\n#> 1 Algeria      Africa     2007    72.3 33333216     6223.\n#> 2 Angola       Africa     2007    42.7 12420476     4797.\n#> 3 Benin        Africa     2007    56.7  8078314     1441.\n#> 4 Botswana     Africa     2007    50.7  1639131    12570.\n#> 5 Burkina Faso Africa     2007    52.3 14326203     1217.\n#> 6 Burundi      Africa     2007    49.6  8390505      430.\n#> # … with 4 more variables: mean_gdpPercap <dbl>,\n#> #   sd_gdpPercap <dbl>, mean_pop <dbl>, sd_pop <dbl>"},{"path":"data-wrangling-with-dplyr.html","id":"chaining-different-transformations-with","chapter":"8 Data Wrangling with dplyr","heading":"8.9 Chaining different transformations with %>%","text":"possible link different data transformations using pipe operator (%>%). case result command passed next one.’re happy output chain functions, can assign new object environment.examples illustrating different tools manipulate dataset can chained.","code":""},{"path":"data-wrangling-with-dplyr.html","id":"example-ranking-european-countries-by-gdp","chapter":"8 Data Wrangling with dplyr","heading":"8.9.1 Example: Ranking European Countries by GDP","text":"instance, code takes gapminder dataset manipulates data order rank European countries GDP 2007","code":"\n\ngapminder %>% #take the dataset gap\n  filter(year ==2007) %>%   #filter observations where year is equal to 2007\n  filter(continent == \"Europe\") %>% #filter observations where variable continent is \"Europe\"\n  mutate(GDP = pop * gdpPercap) %>% #create a new variable \"GDP\" which multiplies pop * gdpPercap\n  arrange(desc(GDP)) #order the observations based on GDP\n#> # A tibble: 30 × 7\n#>    country  continent  year lifeExp    pop gdpPercap     GDP\n#>    <fct>    <fct>     <int>   <dbl>  <int>     <dbl>   <dbl>\n#>  1 Germany  Europe     2007    79.4 8.24e7    32170. 2.65e12\n#>  2 United … Europe     2007    79.4 6.08e7    33203. 2.02e12\n#>  3 France   Europe     2007    80.7 6.11e7    30470. 1.86e12\n#>  4 Italy    Europe     2007    80.5 5.81e7    28570. 1.66e12\n#>  5 Spain    Europe     2007    80.9 4.04e7    28821. 1.17e12\n#>  6 Netherl… Europe     2007    79.8 1.66e7    36798. 6.10e11\n#>  7 Turkey   Europe     2007    71.8 7.12e7     8458. 6.02e11\n#>  8 Poland   Europe     2007    75.6 3.85e7    15390. 5.93e11\n#>  9 Belgium  Europe     2007    79.4 1.04e7    33693. 3.50e11\n#> 10 Sweden   Europe     2007    80.9 9.03e6    33860. 3.06e11\n#> # … with 20 more rows"},{"path":"data-wrangling-with-dplyr.html","id":"example-evolution-of-average-life-expectancy-in-africa-since-1960","chapter":"8 Data Wrangling with dplyr","heading":"8.9.2 Example: Evolution of Average Life Expectancy in Africa since 1960","text":"code takes gapminder dataset manipulates data order calculate evolution average life expectancy Africa since 1960","code":"\nlibrary(gapminder)\nlibrary(tidyverse)\n        \n# take the gapminder dataset (gap) and produce a dataset that includes the evolution in the average life expectancy in African countries since 1960\n# \ngapminder %>%       #take the dataset gapminder\n  filter(year >=1960) %>%  #filter observations where year is equal or higher than 1960\n  group_by(continent, year) %>%  # group the data across different combinations of year and continent\n    filter(continent == \"Africa\") %>% #filter observations where variable continent is \"Africa\"\n  summarise(Average_Life_Expectancy = mean(lifeExp)) #create a variable Average_Life_Expectancy that captures the mean lifeExp in each continent in each year\n#> # A tibble: 10 × 3\n#> # Groups:   continent [1]\n#>    continent  year Average_Life_Expectancy\n#>    <fct>     <int>                   <dbl>\n#>  1 Africa     1962                    43.3\n#>  2 Africa     1967                    45.3\n#>  3 Africa     1972                    47.5\n#>  4 Africa     1977                    49.6\n#>  5 Africa     1982                    51.6\n#>  6 Africa     1987                    53.3\n#>  7 Africa     1992                    53.6\n#>  8 Africa     1997                    53.6\n#>  9 Africa     2002                    53.3\n#> 10 Africa     2007                    54.8"},{"path":"reshaping-the-data.html","id":"reshaping-the-data","chapter":"9 Reshaping the data","heading":"9 Reshaping the data","text":"","code":""},{"path":"reshaping-the-data.html","id":"long-vs.-wide-data","chapter":"9 Reshaping the data","heading":"9.1 Long vs. Wide Data","text":"Tabular data can arranged many ways.instance data displays information gdp growth different countries different years. datasets captures information 9 observations (Morocco 2017, Morocco 2018, Morocco 2019, Finland 2017, Finland 2018, Finland 2019, Pakistan 2017, Pakistan 2018, Pakistan 2019) data organized differently table.first table, country (observation) different row different years placed different columns.second table, columns indicate different variable (country, year, gdp) observation different row.different data structures often referred “longer” vs. “wider” format.\nfirst table example wide-format table. variables (year) spread across columns. compact form present data table often preferable format show reader numbers.long-format table (second one ), data presented compact form. Nonetheless format often preferred comes analyze visualize data.long format often referred ‘tidy format’ (Wickham 2014). perspectiveeach column represents single measurement typeeach row represents single observationeach cell contains single valuedplyr, ggplot2, packages tidyverse designed handle data organized format.Unfortunately, real world datasets format. Data often organised facilitate use analysis, instance facilitate data entry. result, common one variable spread across multiple columns, one observation scattered across multiple rows.tidyr package (part tidyverse) includes series functions designed help users convert data ‘tidy format’. particular, two important functions tidyr reshape data : pivot_longer() pivot_wider().","code":"#>       name GDP_2017 GDP_2018 GDP_2019\n#> 1  Morocco      4.2      3.1      2.6\n#> 2  Finland      3.1      1.1      1.2\n#> 3 Pakistan      5.5      5.8      1.4#>       name year GDP\n#> 1  Morocco 2017 4.2\n#> 2  Morocco 2018 3.1\n#> 3  Morocco 2019 2.6\n#> 4  Finland 2017 3.1\n#> 5  Finland 2018 1.1\n#> 6  Finland 2019 1.2\n#> 7 Pakistan 2017 5.5\n#> 8 Pakistan 2018 5.8\n#> 9 Pakistan 2019 1.4"},{"path":"reshaping-the-data.html","id":"reshaping-the-data-from-wide-to-long-with-pivot_longer","chapter":"9 Reshaping the data","heading":"9.2 Reshaping the data from wide to long with pivot_longer()","text":"common problem analyzing real world datasets case column names names variables, values variable. often preferred format visually compare differences across different groups necessarily best format terms ease analysis.mm one right, variable capturing year observation spread across different columns, one year.order easily manipulate datasets dplyr visualize ggplot need reshape columns new pair variables (year cases) like example left:function pivot_longer() (tidyr package, part tidyverse) makes datasets longer increasing number rows decreasing number columns.pivot_longer() takes three commands, specifyingcols =: vector names columns need reshaped converted values long form. Importantly, cases mant column names convert long format, simpler use cols = specify columns don’t want convert, usually left-columns. done - symbolnames_to =: name new column containing names cols. new column names need quotes.values_to =: name new column containing values corresponding cols. new column names need quotesSo figure , convert left table (table4b) long table right, require:case:first argument provided (cols = c(1999, 2000)) indicates columns need reshaped. case two separate columns, whicih therefore need included vectorThe second argument (names_to = \"year\") indicates name variable created data column names, case yearThe third argument (values_to = \"cases\") indicates name variable created data stored cell value, case casesAnother example dataset may need transformned wider longer format dataset relig_income (preloaded package tidyr). based survey asked people religion annual income.\ndataset contains three variables:religion: stored rows,income: spread across column names, andcount: stored cell values.facilitate analysis can ‘tidy’ dataset using pivot_longer().first argument provided (-religion) indicates columns need reshaped. case every column apart religionThe second argument (names_to = \"income\") indicates name variable created data column names, case incomeThe third argument (values_to = \"count\") indicates name variable created data stored cell value, case countOnce data reshaped format easier visualize using ggplot. instance, code reshapes dataset wide long format passes data ggplot map prevalence different religion within income group.","code":"\ntable4a %>% \n  pivot_longer(cols = c(`1999`, `2000`), \n               names_to = \"year\", \n               values_to = \"cases\")\nhead(relig_income)\n#> # A tibble: 6 × 11\n#>   religion   `<$10k` `$10-20k` `$20-30k` `$30-40k` `$40-50k`\n#>   <chr>        <dbl>     <dbl>     <dbl>     <dbl>     <dbl>\n#> 1 Agnostic        27        34        60        81        76\n#> 2 Atheist         12        27        37        52        35\n#> 3 Buddhist        27        21        30        34        33\n#> 4 Catholic       418       617       732       670       638\n#> 5 Don’t kno…      15        14        15        11        10\n#> 6 Evangelic…     575       869      1064       982       881\n#> # … with 5 more variables: $50-75k <dbl>, $75-100k <dbl>,\n#> #   $100-150k <dbl>, >150k <dbl>, Don't know/refused <dbl>\nrelig_income %>% \n  pivot_longer(-religion, \n               names_to = \"income\", \n               values_to = \"count\")\n#> # A tibble: 180 × 3\n#>    religion income             count\n#>    <chr>    <chr>              <dbl>\n#>  1 Agnostic <$10k                 27\n#>  2 Agnostic $10-20k               34\n#>  3 Agnostic $20-30k               60\n#>  4 Agnostic $30-40k               81\n#>  5 Agnostic $40-50k               76\n#>  6 Agnostic $50-75k              137\n#>  7 Agnostic $75-100k             122\n#>  8 Agnostic $100-150k            109\n#>  9 Agnostic >150k                 84\n#> 10 Agnostic Don't know/refused    96\n#> # … with 170 more rows\nrelig_income_longer <- relig_income %>% \n  pivot_longer(!religion, \n               names_to = \"income\", \n               values_to = \"count\") %>%\n  mutate(income = fct_relevel(income, \n                              \"<$10k\",\n                              \"$10-20k\",\n                              \"$20-30k\",\n                              \"$30-40k\",\n                              \"$40-50k\",\n                              \"$50-75k\",\n                              \"$75-100k\",\n                              \"$100-150k\",\n                              \">150k\"  \n                              )) %>% #Change the order of the values in the income\n  filter(income != \"Don't know/refused\") %>%\n  filter(religion %in% c(\"Atheist\", \"Jewish\", \"Muslim\", \"Catholic\", \"Mainline Prot\", \"Other Christian\", \"Evangelical Prot\", \"Mormon\"))\n\n\n  ggplot(data = relig_income_longer,\n         mapping = aes(x = income,\n                       y = count,\n                       fill = religion)) +\n  geom_col(position = \"fill\") +\n  coord_flip() +\n  labs (title = \"Income Level Across Religious Groups\")"},{"path":"reshaping-the-data.html","id":"reshaping-the-data-from-long-to-wide-with-pivot_wider","chapter":"9 Reshaping the data","heading":"9.3 Reshaping the data from long to wide with pivot_wider()","text":"reshaping dataset wider longer format pivot_longer() needed column names values variable, cases opposite transformation needed. particular observation spread across multiple rows.instance, table left (Wickham Grolemund) contains information cases population different different countries different years, country/year observation found two different rows.function pivot_wider() can used “widen” dataset increasing number columns decreasing number observations. converting values one column new columns names.\n’s relatively rare need pivot_wider() make tidy data, ’s often useful creating summary tables presentation, data format needed tools.pivot_wider() requires two commands, column names original table.names_from indicates column containing labels become new column names.values indicates column containing values populate newTo illustrate change, can observe us_rent_income dataset. dataset includes information 2017 American Community Survey regarding US rent income data pre-loaded tidyverse loaded work environment.observe dataset, can see column named variable two values: income rent. column estimate (estimated value) column moe (90% margin error) include values income rent different American states.transform illustrative table left (df_long) result right, require:case, since two different columns values added values_from, need included inside vector c().transformation increase number columns, replacing column estimate two distinct columns (estimate_rent estimate_income), including values estimated value rent income specific state, replacing column moe two distinct columns (moe_rent moe_income).name new columns automatically combines values found column listed names (income, rent) name variables listed values (estimate, moe). possible change name constructed specifying parameter names_sep.","code":"\nlibrary(tidyverse)\n\nhead(us_rent_income)\n#> # A tibble: 6 × 5\n#>   GEOID NAME    variable estimate   moe\n#>   <chr> <chr>   <chr>       <dbl> <dbl>\n#> 1 01    Alabama income      24476   136\n#> 2 01    Alabama rent          747     3\n#> 3 02    Alaska  income      32940   508\n#> 4 02    Alaska  rent         1200    13\n#> 5 04    Arizona income      27517   148\n#> 6 04    Arizona rent          972     4\nus_rent_income %>%\n  pivot_wider(\n    names_from = variable,\n    values_from = c(estimate, moe)\n  )\n#> # A tibble: 52 × 6\n#>    GEOID NAME       estimate_income estimate_rent moe_income\n#>    <chr> <chr>                <dbl>         <dbl>      <dbl>\n#>  1 01    Alabama              24476           747        136\n#>  2 02    Alaska               32940          1200        508\n#>  3 04    Arizona              27517           972        148\n#>  4 05    Arkansas             23789           709        165\n#>  5 06    California           29454          1358        109\n#>  6 08    Colorado             32401          1125        109\n#>  7 09    Connectic…           35326          1123        195\n#>  8 10    Delaware             31560          1076        247\n#>  9 11    District …           43198          1424        681\n#> 10 12    Florida              25952          1077         70\n#> # … with 42 more rows, and 1 more variable: moe_rent <dbl>"},{"path":"reshaping-the-data.html","id":"reshape-longer-then-wider","chapter":"9 Reshaping the data","heading":"9.4 Reshape longer, then wider","text":"cases, datasets need repshaped wide long format vice versa. example documentation pivot_longer() pivot_wider() show might combine functions solve complex problems.world_bank_pop (preloaded tidyverse) contains data World Bank population per country 2000 2018.glimpse data reveals values population country given year stored different variables, one year.can reshape dataset pivot_longer order bring value population variable single column. case, instead manually listing columns reshaped, can indicate range names (2000:2017)newly created value columns however still contains different variables listed indicator column. includes four different values:SP.POP.GROW population growth,SP.POP.TOTL total population,SP.URB.GROW population growth urban areasSP.URB.TOTL total population urban areasSince represent different quantities observed observation (country/year), can use pivot_wider split different types population count across four different variables.now possible plot data. instance, figure plots evolution growth urban population China.","code":"\nhead(world_bank_pop)\n#> # A tibble: 6 × 20\n#>   country indicator    `2000`  `2001`  `2002` `2003`  `2004`\n#>   <chr>   <chr>         <dbl>   <dbl>   <dbl>  <dbl>   <dbl>\n#> 1 ABW     SP.URB.TOTL  4.24e4  4.30e4  4.37e4 4.42e4 4.47e+4\n#> 2 ABW     SP.URB.GROW  1.18e0  1.41e0  1.43e0 1.31e0 9.51e-1\n#> 3 ABW     SP.POP.TOTL  9.09e4  9.29e4  9.50e4 9.70e4 9.87e+4\n#> 4 ABW     SP.POP.GROW  2.06e0  2.23e0  2.23e0 2.11e0 1.76e+0\n#> 5 AFG     SP.URB.TOTL  4.44e6  4.65e6  4.89e6 5.16e6 5.43e+6\n#> 6 AFG     SP.URB.GROW  3.91e0  4.66e0  5.13e0 5.23e0 5.12e+0\n#> # … with 13 more variables: 2005 <dbl>, 2006 <dbl>,\n#> #   2007 <dbl>, 2008 <dbl>, 2009 <dbl>, 2010 <dbl>,\n#> #   2011 <dbl>, 2012 <dbl>, 2013 <dbl>, 2014 <dbl>,\n#> #   2015 <dbl>, 2016 <dbl>, 2017 <dbl>\npop2 <- world_bank_pop %>% \n  pivot_longer(cols = `2000`:`2017`, \n               names_to = \"year\", \n               values_to = \"value\")\npop2\n#> # A tibble: 19,008 × 4\n#>    country indicator   year  value\n#>    <chr>   <chr>       <chr> <dbl>\n#>  1 ABW     SP.URB.TOTL 2000  42444\n#>  2 ABW     SP.URB.TOTL 2001  43048\n#>  3 ABW     SP.URB.TOTL 2002  43670\n#>  4 ABW     SP.URB.TOTL 2003  44246\n#>  5 ABW     SP.URB.TOTL 2004  44669\n#>  6 ABW     SP.URB.TOTL 2005  44889\n#>  7 ABW     SP.URB.TOTL 2006  44881\n#>  8 ABW     SP.URB.TOTL 2007  44686\n#>  9 ABW     SP.URB.TOTL 2008  44375\n#> 10 ABW     SP.URB.TOTL 2009  44052\n#> # … with 18,998 more rows\npop2 %>% count(indicator)\n#> # A tibble: 4 × 2\n#>   indicator       n\n#>   <chr>       <int>\n#> 1 SP.POP.GROW  4752\n#> 2 SP.POP.TOTL  4752\n#> 3 SP.URB.GROW  4752\n#> 4 SP.URB.TOTL  4752\npop3 <- pop2 %>%\n  pivot_wider(names_from = indicator, values_from = value)\n\npop3\n#> # A tibble: 4,752 × 6\n#>    country year  SP.URB.TOTL SP.URB.GROW SP.POP.TOTL\n#>    <chr>   <chr>       <dbl>       <dbl>       <dbl>\n#>  1 ABW     2000        42444      1.18         90853\n#>  2 ABW     2001        43048      1.41         92898\n#>  3 ABW     2002        43670      1.43         94992\n#>  4 ABW     2003        44246      1.31         97017\n#>  5 ABW     2004        44669      0.951        98737\n#>  6 ABW     2005        44889      0.491       100031\n#>  7 ABW     2006        44881     -0.0178      100832\n#>  8 ABW     2007        44686     -0.435       101220\n#>  9 ABW     2008        44375     -0.698       101353\n#> 10 ABW     2009        44052     -0.731       101453\n#> # … with 4,742 more rows, and 1 more variable:\n#> #   SP.POP.GROW <dbl>\nggplot(data = pop3 %>% filter(country == \"CHN\"),\n       mapping = aes(x = year,\n                     y = SP.URB.GROW,\n                     group = country)) +\n  geom_line() +\n  labs(title = \"Population Growth in the Urban Areas of China\",\n       x = \"Year\",\n       y = \"% Growth\")"},{"path":"reshaping-the-data.html","id":"separating-and-uniting-columns","chapter":"9 Reshaping the data","heading":"9.5 Separating and Uniting Columns","text":"","code":""},{"path":"reshaping-the-data.html","id":"separate","chapter":"9 Reshaping the data","heading":"9.5.1 Separate()","text":"seen pivot_longer used colum names include values, pivot_wider observations spread across multiple rows. different type issue comes analyzing real world dataset comes cases column includes multiple values value spread across columns.function separate() can used divide column multiple columns. values column split function identifies non-alphanumeric separator character (e.g. “/”, “-”).function takes three values:col =: title column containing multiple values need splitinto = c(): vector containing name two columns createdsep =: possible specify character used separate values. specified, function split values forward slash since first non-alphanumeric character found.table left (Wickham Grolemund) shows example column rate provides two different values, numerator denominator, separated “/”.can split values rate column across two different columns using separate() function.","code":"\ntable3 %>% \n  separate(col = rate, \n           into = c(\"cases\", \"population\"), \n           sep = \"/\")\n#> # A tibble: 6 × 4\n#>   country      year cases  population\n#>   <chr>       <int> <chr>  <chr>     \n#> 1 Afghanistan  1999 745    19987071  \n#> 2 Afghanistan  2000 2666   20595360  \n#> 3 Brazil       1999 37737  172006362 \n#> 4 Brazil       2000 80488  174504898 \n#> 5 China        1999 212258 1272915272\n#> 6 China        2000 213766 1280428583"},{"path":"reshaping-the-data.html","id":"unite","chapter":"9 Reshaping the data","heading":"9.5.2 Unite()","text":"separate() can used split column multiple ones, `unite() can used combine multiple columns single one data split.figure provides example (Wickham Grolemund) date split two different column, one century year.\ncan use unite() rejoin century year columns single one.","code":"\ntable5 %>% \n  unite(new, century, year)\n#> # A tibble: 6 × 3\n#>   country     new   rate             \n#>   <chr>       <chr> <chr>            \n#> 1 Afghanistan 19_99 745/19987071     \n#> 2 Afghanistan 20_00 2666/20595360    \n#> 3 Brazil      19_99 37737/172006362  \n#> 4 Brazil      20_00 80488/174504898  \n#> 5 China       19_99 212258/1272915272\n#> 6 China       20_00 213766/1280428583"},{"path":"relational-data.html","id":"relational-data","chapter":"10 Relational Data","heading":"10 Relational Data","text":"cases data analysis involves looking single table data, often data need arriving answer question spread across different data. case, need find ways combine different datasets order perform analysis.term relational data refers analysis data across spread across different tables.instance, let’s instance imagine want investigate electoral success different political parties UK relates economic profile voters. One common starting point answer question looking share votes different parties across different electoral constituencies. can access data British Election Study, large selection open data covering elections referenda. can downloaded using parlitools package.dataset includes information share vote different parties across different constituencies, include information characteristics voters. can retrieve information census (accessible via parlitools package). dataset census_11 includes variety socio-economic characteristics British citizens divided across different constituencies.order analyze different characteristics voters related share vote different parties, need find way combine two datasets (census_11 bes_2017)dplyr package includes number “two-table verbs” work two tables time. verbs work similarly taking input two tables(x y) returning new table.","code":"\n#nstall.packages(\"parlitools\")\nlibrary(parlitools)\n\nbes_2017 <- parlitools::bes_2017\nhead(bes_2017)\n#> # A tibble: 6 × 123\n#>    pano ons_const_id constituency_name       country  region\n#>   <dbl> <chr>        <chr>                   <chr>    <chr> \n#> 1     1 W07000049    Aberavon                Wales    Wales \n#> 2     2 W07000058    Aberconwy               Wales    Wales \n#> 3     3 S14000001    Aberdeen North          Scotland Scotl…\n#> 4     4 S14000002    Aberdeen South          Scotland Scotl…\n#> 5     5 S14000058    West Aberdeenshire and… Scotland Scotl…\n#> 6     6 S14000003    Airdrie and Shotts      Scotland Scotl…\n#> # … with 118 more variables: constituency_type <chr>,\n#> #   winner_17 <fct>, con_17 <dbl>, lab_17 <dbl>,\n#> #   ld_17 <dbl>, snp_17 <dbl>, pc_17 <dbl>, ukip_17 <dbl>,\n#> #   green_17 <dbl>, other_17 <dbl>, majority_17 <dbl>,\n#> #   turnout_17 <dbl>, con_vote_17 <dbl>, lab_vote_17 <dbl>,\n#> #   ld_vote_17 <dbl>, snp_vote_17 <dbl>, pc_vote_17 <dbl>,\n#> #   ukip_vote_17 <dbl>, green_vote_17 <dbl>, …\n#nstall.packages(\"parlitools\")\nlibrary(parlitools)\n\ncensus_11 <- parlitools::census_11\nhead(census_11)\n#> # A tibble: 6 × 191\n#>    pano ons_const_id constituency_name       country  region\n#>   <dbl> <chr>        <fct>                   <fct>    <fct> \n#> 1     1 W07000049    Aberavon                Wales    Wales \n#> 2     2 W07000058    Aberconwy               Wales    Wales \n#> 3     3 S14000001    Aberdeen North          Scotland Scotl…\n#> 4     4 S14000002    Aberdeen South          Scotland Scotl…\n#> 5     5 S14000058    West Aberdeenshire and… Scotland Scotl…\n#> 6     6 S14000003    Airdrie and Shotts      Scotland Scotl…\n#> # … with 186 more variables: constituency_type <fct>,\n#> #   population <dbl>, population_density <dbl>, male <dbl>,\n#> #   female <dbl>, households <dbl>, communal <dbl>,\n#> #   age_0_to_4 <dbl>, age_5_to_7 <dbl>, age_8_to_9 <dbl>,\n#> #   age_10_to_14 <dbl>, age_15 <dbl>, age_16_to_17 <dbl>,\n#> #   age_18_to_19 <dbl>, age_20_to_24 <dbl>,\n#> #   age_25_to_29 <dbl>, age_30_to_44 <dbl>, …"},{"path":"relational-data.html","id":"joining-datasets","chapter":"10 Relational Data","heading":"10.1 Joining Datasets","text":"Let’s say wanted combine variables two tables bes_2017 census_11.can combine data British Electoral Studies Census. Since datasets large number variables, first select columns interest analysis. case British Electoral Studies interested data share votes Conservative party different constituencies. case Census, interested % households home-owners different constituencies (house_owned). case case British Electoral Studies dataset, interested case variable con_17 capturing vote share Conservative party crisis across different constitutencies.Moreover, order able link relevant observations dataset, also need variable uniquely identifying different observations across two dataset. British Electoral Study dataset (bes_2017) UK Census data (census_11) downloaded electoral constituency characterized unique name (e.g. Aberdeen North) unique constituency code used Office National Statistics (e.g. S14000001 case Aberdeen North).\ncase select name constituency purpose captured variable constituency_name.merge dataset census_11 bes_2017 join two datasets using function left join, specifying key using = \"constituency_name\".combined data two dataset can visualize ","code":"\n#install.packages(\"parlitools\")\nlibrary(parlitools)  #Load package parlitools\nlibrary(dplyr)   #Load package dplyr. You can also use library(tidyverse)\n\ncensus_11 <- parlitools::census_11 #download census 2011 and store it in object census_11\n\ncensus_11 <-  census_11 %>%\n  select(constituency_name, house_owned)  #select variables constituency_name and  house_owned\n\nbes_2017 <- parlitools::bes_2017 #download BES 2017 and store it in object bes_2017\nbes_2017 <- bes_2017 %>%\n  select(constituency_name, con_17) #select variables constituency_name and  con_17\n\nbes_2017_joined <- left_join(bes_2017, census_11, by = \"constituency_name\" ) #join the two dataset in new object bes_2017_joined\n\nhead(bes_2017_joined)\n#> # A tibble: 6 × 3\n#>   constituency_name                 con_17 house_owned\n#>   <chr>                              <dbl>       <dbl>\n#> 1 Aberavon                            17.7        66.8\n#> 2 Aberconwy                           44.6        69.7\n#> 3 Aberdeen North                      22.7        45.5\n#> 4 Aberdeen South                      42.1        62.5\n#> 5 West Aberdeenshire and Kincardine   47.9        75.3\n#> 6 Airdrie and Shotts                  23.2        60.2\nlibrary(ggplot2)\nggplot(data = bes_2017_joined,\n       aes(x = house_owned, y = con_17)) +\n        geom_smooth(size=1.75, colour = \"red\") +\n        ylab(\"Share of Votes Cast for Conservatives\") + \n      xlab(\"Percentage of Home-Owners\") +\n         geom_point() +\n         geom_smooth()"},{"path":"relational-data.html","id":"defining-keys","chapter":"10 Relational Data","heading":"10.1.1 Defining keys","text":"order able connect different tables, need variable (set variables) common. often called keys. key uniquely identify observation.two types keys:primary key uniquely identifies observation table.foreign key uniquely identifies observation another table.simple cases, single variable sufficient identify observation.example , two tables joined single variable, variable name tables. key specified stating inside function parameter = \"key_name\".cases multiple variables needed. instance, dealing longitudinal data capturing number countries across many years, one observation identified combination country variable date variable.possible specify multiple variables used key within character vector, = c(“x”, “y”)`.instance, example merging gapminder dataset another dataset (polity) capturing country/year observations. left_join() specify two datasets merged basis matching values along two different variables (= c(\"country\", \"year\")).often case variables linked different names across two tables. possible use named character vector: = c(\"\" = \"b\"). match variable table x variable b table y. variables x used output.","code":"\n#Import Gapminder dataset\nlibrary(gapminder)\n\n#Import Polity dataset\npolity <- read.csv(\"data/polity_sub.csv\")\n\n# Left join \ngap_extended <- gapminder %>% #Take the gapminder dataset\n  left_join(polity, #join with polity dataset keeping all observations of the first dataset (gapminder)\n  by = c(\"country\", \"year\")) #select the variable country and year as keys to join the two datasets\n      #Store the results in object called gap1\n\n# Left join (alternative formulation without %>%)\ngap_extended <- left_join(gapminder, polity, by = c(\"country\", \"year\"))\n\nhead(gap_extended)"},{"path":"relational-data.html","id":"join-functions","chapter":"10 Relational Data","heading":"10.2 Join Functions","text":"package dplyr contains different join functions can used merge different datasets. function first first matches observations keys, copies across variables one table , adding right.visualizations, coloured columns represent “key” variable used match observations two tables joined, grey column represents “value” column added result join.","code":""},{"path":"relational-data.html","id":"left_join","chapter":"10 Relational Data","heading":"10.2.1 left_join()","text":"commonly used join left_join(): use whenever look additional data another table. example, left_join() dataset x dataset y pulls variables y preserving observations x. function preserves original observations first table x even match y. NA appear cells match y.often default option joining datasets unless specific reasons wanting different format.source: tidyexplain","code":""},{"path":"relational-data.html","id":"right_join","chapter":"10 Relational Data","heading":"10.2.2 Right_join()","text":"addition left_join, four join options.right_join similar left_join keeps observations second dataset (y) rather first one.source: tidyexplain","code":""},{"path":"relational-data.html","id":"inner_join","chapter":"10 Relational Data","heading":"10.2.3 Inner_join()","text":"inner_join keeps observations appear tables. observation key appears one two tables removed.source: tidyexplain","code":""},{"path":"relational-data.html","id":"full_join","chapter":"10 Relational Data","heading":"10.2.4 Full_join","text":"outer_join instead keeps observations appear least one two tables. observation two tables bebe removed.\nsource: tidyexplain","code":""},{"path":"relational-data.html","id":"filtering-observations-based-on-another-dataset","chapter":"10 Relational Data","heading":"10.3 Filtering observations based on another dataset","text":"dplyr package also includes two different join functions influence observations based relation two datasets.","code":""},{"path":"relational-data.html","id":"semi-join","chapter":"10 Relational Data","heading":"10.3.1 semi-join()","text":"function semi_join(x, y) applied two datasets (x y) keeps rows first dataset match second dataset. function duplicate rows multiple matches foundsource: tidyexplain","code":""},{"path":"relational-data.html","id":"anti-join","chapter":"10 Relational Data","heading":"10.3.2 anti-join","text":"anti-join() function instead opposite semi-join() drops observations first dataset match second one. result, can used identify observations one dataset match one.source: tidyexplain","code":""},{"path":"relational-data.html","id":"identify-commondifferent-rows-across-datasets","chapter":"10 Relational Data","heading":"10.4 Identify common/different rows across datasets","text":"dplyr package also includes three helpful functions can used idenetify entire rows common different across datasets.","code":""},{"path":"relational-data.html","id":"intersect","chapter":"10 Relational Data","heading":"10.4.1 intersect()","text":"called compare dataset x y, function intersect(x, y) returns obervations found datasets.source: tidyexplain","code":""},{"path":"relational-data.html","id":"union","chapter":"10 Relational Data","heading":"10.4.2 union()","text":"called compare dataset x y, function union(x, y) returns observations unique dataset, excluding common.source: tidyexplain","code":""},{"path":"relational-data.html","id":"setdiff","chapter":"10 Relational Data","heading":"10.4.3 setdiff ()","text":"called compare dataset x y, function setdiff(x, y) returns observations unique first dataset (x).source: tidyexplain","code":""},{"path":"missing-data.html","id":"missing-data","chapter":"11 Missing Data","heading":"11 Missing Data","text":"Missing values ubiquitous data need carefully explored handled initial stages analysis. Large datasets often missing values various reasons: coding errors, governments hide information, data collected yet, among others. cases, source dataset explain source missing values treated, others figure extent data contains missing value may influence analysis.Whatever case, need take account analysis.R registers missing values NA (available). Note \ncharacter value letters “N” “”, distinct type \nvalue.","code":""},{"path":"missing-data.html","id":"checking-for-missing-values","chapter":"11 Missing Data","heading":"11.1 Checking for missing values","text":"R, can control presence missing values using function .na()instance, code first create sample vector includes missing values use function .na() control presence missing data. returns vector equal length, element takes value true corresponding element original vector missing.can calculate number missing values summing elements vector .na() returned true value.also tools look missing data.instance naniar package provides different tools identify presence missing data dataset.package loaded, function miss_var_summary() returns number missing values variable, percent missing variable.number percentage missing values across different variables package “airquality”.visdat package instead provides number functions provide graphical overview presence missing data dataset.instance, vis_miss function visdat package can called illustrate whether data missing columns dataframe.package gg_miss_var() function can used visualise missing data across different variablesThere visualisations available naniar (starting gg_miss_) - can see “Gallery Missing Data Visualisations” vignette..","code":"\n\n#Create vector including the monthly inflation rates in the US\nInflation_Data <- c(45, 23, NA, 21, NA)\nis.na(Inflation_Data)\n#> [1] FALSE FALSE  TRUE FALSE  TRUE\n\n#Create vector including the monthly inflation rates in the US\nInflation_Data <- c(45, 23, NA, 21, NA)\n\n#Store in a vector a logic element recording whether the value was missing\nMissing_Inflation_Data <- is.na(Inflation_Data)\n\n#Sum the number of NA (TRUE value in \"missing votes\")\nSumNA <- sum(Missing_Inflation_Data)\n\npaste(\"There are \", SumNA, \" missing votes in our initial vector\" )\n#> [1] \"There are  2  missing votes in our initial vector\"\n#install.packages(\"naniar\") #This needs to be run only the fist time\nlibrary(naniar)\nmiss_var_summary(airquality)\n#> # A tibble: 6 × 3\n#>   variable n_miss pct_miss\n#>   <chr>     <int>    <dbl>\n#> 1 Ozone        37    24.2 \n#> 2 Solar.R       7     4.58\n#> 3 Wind          0     0   \n#> 4 Temp          0     0   \n#> 5 Month         0     0   \n#> 6 Day           0     0\n\n#install.packages(\"visdat\") #the package needs to be installed only the first time\nlibrary(visdat)\n\nvis_miss(airquality)\n\ngg_miss_var(airquality)\n#> Warning: It is deprecated to specify `guide = FALSE` to\n#> remove a guide. Please use `guide = \"none\"` instead."},{"path":"missing-data.html","id":"cleaning-missing-values","chapter":"11 Missing Data","heading":"11.2 Cleaning missing values","text":"datasets may ways representing missing values, “99”, “Missing”, “Unknown”, empty character value “” looks “blank”, single space ” “.possible clean missing values espressed dataset characters (e.g. “99”, “Missing”) converging NA.\nna_if() function dplyr package (part tidyverse) replace specified value NA.instance, vector includes sequence numbers capturing level GDP growth country. glimpse values show significant discrepancy values reported value 99, suggests missing number. able ascertain case, can replace NA using na_if()cases, instead replacing missing value NA may want replace another value.\nfunction replace_na() replaces given value dataset, variable, vector NA.instance, let’s imagine collected data number hours spent day consuming news internet week, missing values days consume . case, may want replace NA value 0","code":"\nlibrary(tidyverse)\n\nGDP_Growth <- c(3.2, 2.2, 99, 3.2, 1.7, 1.2, 1.0, 99)\n\nGDP_Growth_Clean <- na_if(GDP_Growth, 99)\n\nGDP_Growth_Clean\n#> [1] 3.2 2.2  NA 3.2 1.7 1.2 1.0  NA\nlibrary(tidyverse)\n\nLondon_Borough <- c(\"Sutton\", \"Missing\", \"Croydon\", \"Bromley\", \"Lewisham\", \"Greenwich\", \"Bexley\", \"Havering\", \"Barking and Dagenham\")\n\nLondon_Borough_Clean <- na_if(GDP_Growth, \"Missing\")\n\nLondon_Borough_Clean\n#> [1]  3.2  2.2 99.0  3.2  1.7  1.2  1.0 99.0\nTV_Hours <- c(1, 2, NA, NA, 1, 1.5, 1.5)\n\nGDP_Growth_Clean <- replace_na(TV_Hours, 0)"},{"path":"missing-data.html","id":"operations-with-missing-values","chapter":"11 Missing Data","heading":"11.3 Operations with Missing Values","text":"default, R operations performed missing values fail , alerting compute need. instance, run mathematical function max(), min(), sum() mean(), NA values present returned value NA.instance, see happens try calculate average number vector includes missing valuesYou can avoid problem removing missing values calculation. functions, can specify argument na.rm = TRUE let R know ignore missing values \nvector carry function.","code":"\n\n#Create vector including the monthly inflation rates in the US\nVotes <- c(45, 23, NA, 21, NA)\n\n#Calculate the Mean value, excluding the NA. \nMean_Results <- mean(Votes)\n\n#Display the results in the console\nMean_Results \n#> [1] NA\n\n#Create vector including NA value\nVotes <- c(45, 23, NA, 21, NA)\n\n#Calculate the Mean value, excluding the NA\nMean_Results <- mean(Votes, na.rm = T)\n \n#Display the results in the console\nMean_Results \n#> [1] 29.66667"},{"path":"missing-data.html","id":"dropping-missing-values","chapter":"11 Missing Data","heading":"11.4 Dropping Missing Values","text":"cases may appropriate remove observations data available one variables interested exploring.drop_na() function part dplyr package (included tidyverse library). run parentheses empty, function can used filter dataset retain rows without missing values.instead column names specified within parentheses, rows missing values columns dropped.","code":""},{"path":"missing-data.html","id":"completing-missing-values","chapter":"11 Missing Data","heading":"11.5 Completing Missing Values","text":"cases missing values explicitly flagged NA value, cases value simply present data.illustration can found table (Wickham Grolemund).table provides return stock market (column return) different quarters (column qtr) year (column year).closer look reveals return first quarter 2016 appear dataset.often appropriate make implicit missing value explicit. One tool available tidyr package (part tidyverse) complete() function.function takes set columns, finds unique combinations. ensures original dataset contains values, filling explicit NAs necessary.","code":"#> # A tibble: 7 × 3\n#>    year   qtr return\n#>   <dbl> <dbl>  <dbl>\n#> 1  2015     1   1.88\n#> 2  2015     2   0.59\n#> 3  2015     3   0.35\n#> 4  2015     4  NA   \n#> 5  2016     2   0.92\n#> 6  2016     3   0.17\n#> 7  2016     4   2.66\nstocks %>% \n  complete(year, qtr)\n#> # A tibble: 8 × 3\n#>    year   qtr return\n#>   <dbl> <dbl>  <dbl>\n#> 1  2015     1   1.88\n#> 2  2015     2   0.59\n#> 3  2015     3   0.35\n#> 4  2015     4  NA   \n#> 5  2016     1  NA   \n#> 6  2016     2   0.92\n#> 7  2016     3   0.17\n#> 8  2016     4   2.66"},{"path":"missing-data.html","id":"filling-missing-values","chapter":"11 Missing Data","heading":"11.6 Filling Missing Values","text":"real world dataset, missing values indicate previous value carried forward.Take instance dataset . data includes quarterly data stock market return across different years. value year however filled first quarter year.can fill missing values fill() tidyr package. takes set columns want missing values replaced last observation found.","code":"\nstocks <- tibble(\n  year   = c(2015, NA, NA, NA, 2016, NA, NA, NA),\n  qtr    = c(   1,    2,    3,    4, 1,   2,    3,    4),\n  return = c(1.88, 0.59, 0.35,  0.9, 1.1, 0.92, 0.17, 2.66)\n)\n\nstocks\n#> # A tibble: 8 × 3\n#>    year   qtr return\n#>   <dbl> <dbl>  <dbl>\n#> 1  2015     1   1.88\n#> 2    NA     2   0.59\n#> 3    NA     3   0.35\n#> 4    NA     4   0.9 \n#> 5  2016     1   1.1 \n#> 6    NA     2   0.92\n#> 7    NA     3   0.17\n#> 8    NA     4   2.66\nstocks %>% \n  fill(year)\n#> # A tibble: 8 × 3\n#>    year   qtr return\n#>   <dbl> <dbl>  <dbl>\n#> 1  2015     1   1.88\n#> 2  2015     2   0.59\n#> 3  2015     3   0.35\n#> 4  2015     4   0.9 \n#> 5  2016     1   1.1 \n#> 6  2016     2   0.92\n#> 7  2016     3   0.17\n#> 8  2016     4   2.66"},{"path":"assessment-guidance.html","id":"assessment-guidance","chapter":"A Assessment Guidance","heading":"A Assessment Guidance","text":"","code":""},{"path":"assessment-guidance.html","id":"instructions-for-completing-your-assignment","chapter":"A Assessment Guidance","heading":"A.1 Instructions for Completing your Assignment","text":"key steps complete assignmentCreate personal copy assessment project selecting “copy” right-hand sideOpen copy Assessment projectOpen copy Assessment projectOpen file “IP2038 Assessment 2021-22.rmd”Open file “IP2038 Assessment 2021-22.rmd”assessment template lays 4 main pieces analysis selected data. Complete different tasks editing RMarkdown file imported. tasks:\nPart : Complete R code chunk first part task code produce required numeric graphicalresults. include adding comments code using #sign order explain done.\nPart B: Interpret output code chunk\nassessment template lays 4 main pieces analysis selected data. Complete different tasks editing RMarkdown file imported. tasks:Part : Complete R code chunk first part task code produce required numeric graphicalresults. include adding comments code using #sign order explain done.Part B: Interpret output code chunkSave file export outside RStudio computer (select File pane –> Export)Save file export outside RStudio computer (select File pane –> Export)Submit completed RMarkdown (.rmd) file submission pointon Moodle. Please note version assignment submitted Moodle can assessed. copy file available RStudio considered valid submission.","code":""},{"path":"assessment-guidance.html","id":"data","chapter":"A Assessment Guidance","heading":"A.2 Data","text":"order complete assignment select, load R environment, analyze following datasets (availablethrough owidR package):Electoral Democracy Varieties Democracy dataset .Download Code: data <- owid(\"electoral-democracy\")information: http://v-dem.netTransparency International Corruption Perception IndexDownload Code: data <- owid(\"TI-corruption-perception-index\")information: https://www.transparency.org/cpi2018OECD Gender Wage Gap DataDownload Code: data <- owid(\"gender-wage-gap-oecd\")information: https://data.oecd.org/earnwage/gender-wage-gap.htm#indicator-chartCO2 Emissions Data Country Global Carbon ProjectDownload Code: data <- owid(\"annual-co2-emissions-per-country\")information: https://doi.org/10.5281/zenodo.5569235OECD Data Social Expenditures share GDPDownload Code: data <- owid(\"social-spending-oecd-longrun\")information: http://stats.oecd.org/Index.aspx?datasetcode=SOCX_AGGSIPRI Military Expenditure DatabaseDownload Code: data <- owid(\"military-expenditure-total\")information: https://www.sipri.org/databases/milexWorld Bank Data Global PovertyDownload Code: data <- owid(\"---extreme-poverty-line-world-bank\")information: http://iresearch.worldbank.org/PovcalNet/povDuplicateWB.aspxYou need download selected data directly RStudio using owidR package.order , need :Install owidR package using command install.packages(\"owidR\") . step required first timeInstall owidR package using command install.packages(\"owidR\") . step required first timeLoad owidR package using command library(owidR)Load owidR package using command library(owidR)Download selected dataset calling owidR() function, passing name dataset argument within parentheses.Download selected dataset calling owidR() function, passing name dataset argument within parentheses.instance can download Polity IV dataset (named \"political-regimes--time\") using function","code":"\n# Install the owidR package (this needs to be done only the first time)\ninstall.packages(\"owidR\")\n\n#Load the owidR packagee\nlibrary(owidR)\n\n#download the \"political-regimes\" dataset\ndata <- owid(\"political-regimes\")\n "},{"path":"assessment-guidance.html","id":"question-1-summary-of-the-selected-data","chapter":"A Assessment Guidance","heading":"A.3 Question 1: Summary of the Selected Data","text":"question provide description main characteristics selected dataset, including main variable interest (e.g. CO2 emission, level democracy, military spending) constructed main summary statistics.","code":""},{"path":"assessment-guidance.html","id":"summary-statistics","chapter":"A Assessment Guidance","heading":"A.3.1 Summary Statistics","text":"code section answer (1.) provide graph summary table showing distribution key variable chosen across observations key summary statistics. text part answer (1.B) interpret findings.Different elements can addressed section:\n- number observations\n- distribution key variable interest\n- central tendency measures (e.g. mean, median, modal) variable interest\n- range values (e.g. min, max)\n- completeness data presence missing values","code":""},{"path":"assessment-guidance.html","id":"explaninig-the-variable","chapter":"A Assessment Guidance","heading":"A.3.2 Explaninig the variable","text":"text part answer (1.B) also summarize selected variable constructed values interpreted. order , please consult original website dataset codebook (available).can obtain information source data variables calculated using owid_source(), example .","code":"\ndata <- owid(\"political-regimes\")\n\nowid_source(data)"},{"path":"assessment-guidance.html","id":"question-2.-analysis-of-the-selected-data-across-countries","chapter":"A Assessment Guidance","heading":"A.4 Question 2. Analysis of the Selected Data Across Countries","text":"code section answer (2.) produce graph showing distribution key variable across different countries. text part answer (2.B) interpret findings.","code":""},{"path":"assessment-guidance.html","id":"selecting-countries","chapter":"A Assessment Guidance","heading":"A.4.1 Selecting Countries","text":"Comparing variable across countries difficult visualize assess case dataset includes large number countries. case, can:Number countries: select handful key countries illustrate key differences similaritiesGroup countries: instead comparing individual countries, can group based certain features, location (e.g. continent listed gapminder dataset)Key country: focus exploring selected variable one specific countries (e.g. largest polluters exploring CO2 emissions) stand comparison others","code":""},{"path":"assessment-guidance.html","id":"selecting-years","chapter":"A Assessment Guidance","heading":"A.4.2 Selecting Years","text":"case dataset covering wide range years, possible :limit analysis one significant significant years (e.g. recent year dataset). case visualization like bar plot may appropriate illustrate value observation country sepcific period.discuss difference across countries across broader range. case visualization like boxplot may appropriate illustrate range observations associated country","code":""},{"path":"assessment-guidance.html","id":"question-3.-analysis-of-the-selected-data-over-time","chapter":"A Assessment Guidance","heading":"A.5 Question 3. Analysis of the Selected Data Over Time","text":"question analyze variable interest varies across time. instance, increased/decreased across time? evolution linear cyclical? significant turning points?\ncode section answer (3.) produce graph showing distribution key variable chosen across time. text part answer (3.B) interpret findings.","code":""},{"path":"assessment-guidance.html","id":"selecting-time-period","chapter":"A Assessment Guidance","heading":"A.5.1 Selecting Time Period","text":"case datasets covering long range years, may appropriate limit analysis emphasize visualization time period relevant analysis.","code":""},{"path":"assessment-guidance.html","id":"selecting-countries-1","chapter":"A Assessment Guidance","heading":"A.5.2 Selecting Countries","text":"analyzing evolution variable interest across time, different options available regarding data selected. case, can:Key country: focus exploring selected variable varies across time one specific countriesGlobal Average/Median: analyze evolution average level variable across timeGroup countries: can group countries based certain features, location","code":""},{"path":"assessment-guidance.html","id":"question-4.-association-between-the-selected-data-and-other-variables","chapter":"A Assessment Guidance","heading":"A.6 Question 4. Association between the Selected Data and Other Variables","text":"selected variable relate political economic factors characteristics? aim part analysis identify variables may associated variable exploring provide interpretation relationship (lack ). also relevant question highlight variables expected associated variables interest appear analysis.code section answer (4.) produce suitable plot illustrate relationship different variables.text part answer (4.B) interpret findings.","code":""},{"path":"assessment-guidance.html","id":"finding-data-from-owidr","chapter":"A Assessment Guidance","heading":"A.6.1 Finding data from owidR","text":"answer question need identify least one additional datasets available World Data using owidR package (e.g. gdp per capita, level democracy,) join data selected variable dataset.order identify suitable datasets integrated analysis, can use owid_search() scan World Data website datasets include title keywords within brackets using quotation marks. instance:instance command owid_search(\"political regime\") returns following output:identified dataset interest, can find following:download dataset using owid() function, adding chart_id within brackets (e.g. political_regime_data <- owid (\"political-regime\"))view data using function View() function open data visualizer (e.g. View(political_regime_data))retrieve information source data using owid_source() function, adding name object data stored within brackets","code":"\nowid_search(\"\")"},{"path":"assessment-guidance.html","id":"combining-the-data","chapter":"A Assessment Guidance","heading":"A.6.2 Combining the data","text":"order analyse extent new data related original variable interest, two datasets need combined. can done using left_join() function. information , please consult section relational data course material.","code":""},{"path":"assessment-guidance.html","id":"suggested-datasets","chapter":"A Assessment Guidance","heading":"A.6.3 Suggested datasets","text":"helpful starting points include:Level Democracy Varieties Democracy dataset: owid(\"electoral-democracy\")Freedom Expression Varieties Democracy Dataset: owid(\"freedom--expression\")World Bank’s Data GDP per Capita: owid(\"gdp-per-capita--us-dollar-world-bank\")Share GDP Economic Sector: owid(\"shares--gdp--economic-sector\")Level Urbanization: owid(\"urbanization-last-500-years\")Population Age Group: owid(\"population--broad-age-group\")","code":""},{"path":"assessment-guidance.html","id":"question-5-what-have-we-learnt-through-the-analysis-of-this-data-approx-200-400-words","chapter":"A Assessment Guidance","heading":"A.7 Question 5 : what have we learnt through the analysis of this data? (approx 200-400 words)","text":"Write concluding section identifying main findings analysis, limitation, remaining issues analysis.","code":""},{"path":"list-of-datasets.html","id":"list-of-datasets","chapter":"B List of Datasets","heading":"B List of Datasets","text":"document provides list commonly used databases capturing key political economic trends domestic international level.","code":""},{"path":"list-of-datasets.html","id":"data-warehouses","chapter":"B List of Datasets","heading":"B.1 Data Warehouses","text":"World DataGapminderThe International Political Economy Data Resource","code":""},{"path":"list-of-datasets.html","id":"political-institutions-and-political-regimes","chapter":"B List of Datasets","heading":"B.2 Political Institutions and Political Regimes","text":"Varieties DemocracyFreedom House - Freedom World ReportPolity ProjectInter-American Development Bank - Database Political Institutions 2017Cheibub, Gandhi, Vreeland (2010) “Data ’Democracy Dictatorship Revisited”Barbara Geddes, Joseph Wright, Erica Frantz. 2014. Autocratic Regime Data.Axel Hadenius, Jan Teorell, & Michael Wahman, Authoritarian Regimes Dataset (ARD)Marquez, Democracy Data","code":""},{"path":"list-of-datasets.html","id":"country-election","chapter":"B List of Datasets","heading":"B.3 Country Election","text":"ElectionGuideEuropean Election DatabaseLAEDA Latin American Electoral DataAfrican Election DatabaseBritish General Election Constituency ResultsGlobal Election CalendarGlobal Election Database","code":""},{"path":"list-of-datasets.html","id":"political-parties","chapter":"B List of Datasets","heading":"B.4 Political Parties","text":"Global Party Survey","code":""},{"path":"list-of-datasets.html","id":"public-opinion-data","chapter":"B List of Datasets","heading":"B.5 Public Opinion Data","text":"US Presidential Approval - Roper CenterGallup Presidential Job Approval CenterThe American Presidency Project - Presidential Job ApprovalAmerican National Election StudiesExecutive Approval ProjectLAPOPAfrobarometerComparative Study Election Systems","code":""},{"path":"list-of-datasets.html","id":"values-and-social-surveys","chapter":"B List of Datasets","heading":"B.6 Values and Social Surveys","text":"World Value SurveyEuropean Social SurveyInternational Social Survey Programme","code":""},{"path":"list-of-datasets.html","id":"government-macroeconomic-and-financial-data","chapter":"B List of Datasets","heading":"B.7 Government Macroeconomic and Financial Data","text":"International Monetary Fund’s Government Finance Statistics (GFS)World Bank, Open Database","code":""},{"path":"list-of-datasets.html","id":"government-debt","chapter":"B List of Datasets","heading":"B.8 Government Debt","text":"World Bank’s International Debt Statistics","code":""},{"path":"list-of-datasets.html","id":"inequality","chapter":"B List of Datasets","heading":"B.9 Inequality","text":"World Wealth Income Database (WID.world), accessible wid-r-tool package","code":""},{"path":"list-of-datasets.html","id":"foreign-direct-investment","chapter":"B List of Datasets","heading":"B.10 Foreign Direct Investment","text":"International Trade Center - Investment MapUnited Nations Conference Trade DevelopmentEurostat","code":""},{"path":"list-of-datasets.html","id":"trade-and-tariff-data","chapter":"B List of Datasets","heading":"B.11 Trade and Tariff Data","text":"World Trade Organization - Trade Tariff DataInternational Monetary Fund Direction Trade StatisticsUnited Nations Comtrade LabsWorld Bank’s TC Data Initiative","code":""},{"path":"list-of-datasets.html","id":"remittances","chapter":"B List of Datasets","heading":"B.12 Remittances","text":"World Bank - Migration Remittances DataUnited Nations Conference Trade Development - Personal RemittancesMigration Policy Institute - Remittances DataKNOMAD, Global Knowledge Partnership Migration Development","code":""},{"path":"list-of-datasets.html","id":"corruption-accountability-and-rule-of-law","chapter":"B List of Datasets","heading":"B.13 Corruption, Accountability and Rule of Law","text":"Transparency International Corruption Perceptions IndexTransparency International Global Corruption BarometerWorld Bank - Worldwide Governance Indicators (WGI)World Bank - Transparency, Accountability Corruption Public SectorOECD - Access JusticeWorld Justice Project Rule Law Index","code":""},{"path":"list-of-datasets.html","id":"violent-crime","chapter":"B List of Datasets","heading":"B.14 Violent Crime","text":"United Nations Office Drugs CrimeWorld Bank - Intentional homicidesWorld Population Review - Violent Crime Rates","code":""},{"path":"list-of-datasets.html","id":"organized-crime","chapter":"B List of Datasets","heading":"B.15 Organized Crime","text":"United Nations Interregional Crime Justice Research Institute[United Nations Office Drugs Crime(https://dataunodc.un.org)","code":""},{"path":"list-of-datasets.html","id":"conflict","chapter":"B List of Datasets","heading":"B.16 Conflict","text":"Correlates WarPeace Research Institute Oslo (PRIO)PRIO Battledeaths DatasetUCDP/PRIO Armed Conflict Dataset","code":""},{"path":"list-of-datasets.html","id":"terrorism","chapter":"B List of Datasets","heading":"B.17 Terrorism","text":"Global Terrorism Dataset","code":""}]
